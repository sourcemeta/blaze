{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://json.schemastore.org/babelrc.json",
  "title": "JSON schema for Babel 6+ configuration files",
  "type": "object",
  "allOf": [
    {
      "$ref": "#/definitions/Options"
    },
    {
      "properties": {
        "env": {
          "description": "This is an object of keys that represent different environments. For example, you may have: `{ env: { production: { /* specific options */ } } }` which will use those options when the environment variable BABEL_ENV is set to \"production\". If BABEL_ENV isn't set then NODE_ENV will be used, if it's not set then it defaults to \"development\"",
          "default": {},
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Options"
          }
        }
      }
    }
  ],
  "definitions": {
    "Options": {
      "type": "object",
      "properties": {
        "extends": {
          "description": "A path to a .babelrc file to extend",
          "type": "string"
        },
        "ast": {
          "description": "Include the AST in the returned object",
          "default": true,
          "type": "boolean"
        },
        "auxiliaryCommentAfter": {
          "description": "Attach a comment after all non-user injected code.",
          "type": "string"
        },
        "auxiliaryCommentBefore": {
          "description": "Attach a comment before all non-user injected code.",
          "type": "string"
        },
        "code": {
          "description": "Enable code generation",
          "default": true,
          "type": "boolean"
        },
        "comments": {
          "description": "Output comments in generated output.",
          "default": true,
          "type": "boolean"
        },
        "compact": {
          "description": "Do not include superfluous whitespace characters and line terminators. When set to \"auto\" compact is set to true on input sizes of >500KB.",
          "default": "auto",
          "type": [ "string", "boolean" ],
          "enum": [ "auto", true, false ]
        },
        "filename": {
          "description": "Filename for use in errors etc.",
          "default": "unknown",
          "type": "string"
        },
        "filenameRelative": {
          "description": "Filename relative to sourceRoot (defaults to \"filename\")",
          "type": "string"
        },
        "highlightCode": {
          "description": "ANSI highlight syntax error code frames",
          "type": "boolean"
        },
        "ignore": {
          "description": "Opposite of the \"only\" option",
          "type": [ "string", "array" ],
          "items": {
            "type": "string"
          }
        },
        "inputSourceMap": {
          "description": "If true, attempt to load an input sourcemap from the file itself. If an object is provided, it will be treated as the source map object itself.",
          "default": true,
          "type": [ "boolean", "object" ]
        },
        "keepModuleIdExtensions": {
          "description": "Keep extensions in module ids",
          "default": false,
          "type": "boolean"
        },
        "moduleId": {
          "description": "Specify a custom name for module ids.",
          "type": "string"
        },
        "moduleIds": {
          "description": "If truthy, insert an explicit id for modules. By default, all modules are anonymous. (Not available for common modules)",
          "default": false,
          "type": "string"
        },
        "moduleRoot": {
          "description": "Optional prefix for the AMD module formatter that will be prepend to the filename on module definitions. (defaults to \"sourceRoot\")",
          "type": "string"
        },
        "only": {
          "description": "A glob, regex, or mixed array of both, matching paths to only compile. Can also be an array of arrays containing paths to explicitly match. When attempting to compile a non-matching file it's returned verbatim.",
          "type": [ "string", "array" ],
          "items": {
            "type": "string"
          }
        },
        "plugins": {
          "description": "List of plugins to load and use",
          "type": "array",
          "items": {
            "type": [ "string", "array" ],
            "items": [
              {
                "description": "The name of the plugin.",
                "type": "string"
              },
              {
                "description": "The options of the plugin.",
                "type": "object"
              }
            ]
          }
        },
        "presets": {
          "description": "List of presets (a set of plugins) to load and use",
          "type": "array",
          "items": {
            "type": [ "string", "array" ],
            "items": [
              {
                "description": "The name of the preset.",
                "type": "string"
              },
              {
                "description": "The options of the preset.",
                "type": "object"
              }
            ]
          }
        },
        "retainLines": {
          "description": "Retain line numbers. This will lead to wacky code but is handy for scenarios where you can't use source maps. NOTE: This will obviously not retain the columns.",
          "default": false,
          "type": "boolean"
        },
        "sourceFileName": {
          "description": "Set sources[0] on returned source map. (defaults to \"filenameRelative\")",
          "type": "string"
        },
        "sourceMapTarget": {
          "description": "Set file on returned source map. (defaults to \"filenameRelative\")",
          "type": "string"
        },
        "sourceMaps": {
          "description": "If truthy, adds a map property to returned output. If set to \"inline\", a comment with a sourceMappingURL directive is added to the bottom of the returned code. If set to \"both\" then a map property is returned as well as a source map comment appended.",
          "default": false,
          "type": [ "string", "boolean" ],
          "enum": [ "both", "inline", true, false ]
        },
        "sourceRoot": {
          "description": "The root from which all sources are relative. (defaults to \"moduleRoot\")",
          "type": "string"
        }
      }
    }
  }
}
