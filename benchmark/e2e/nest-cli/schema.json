{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://json.schemastore.org/nest-cli.json",
  "title": "Nest CLI configuration",
  "$comment": "https://docs.nestjs.com/cli/monorepo#cli-properties",
  "type": "object",
  "properties": {
    "collection": {
      "description": "Points at the collection of schematics used to generate components. you generally should not change this value.",
      "default": "@nestjs/schematics",
      "type": "string"
    },
    "compilerOptions": {
      "$ref": "#/definitions/CompilerOptions"
    },
    "defaultLibraryPrefix": {
      "description": "Default import prefix for newly generated libraries.",
      "default": "@app",
      "type": "string"
    },
    "entryFile": {
      "description": "The entry file where 'nest start' work with. Default to 'main'.",
      "$comment": "https://github.com/nestjs/nest-cli/blob/master/actions/start.action.ts",
      "default": "main",
      "type": "string"
    },
    "generateOptions": {
      "$ref": "#/definitions/GenerateOptions"
    },
    "language": {
      "default": "ts",
      "type": "string"
    },
    "monorepo": {
      "description": "(monorepo only) For a monorepo mode structure, this value is always true.",
      "default": false,
      "type": "boolean"
    },
    "projects": {
      "default": {},
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/ProjectConfiguration"
      }
    },
    "root": {
      "description": "(monorepo only) Points at the project root of the default project.",
      "default": "",
      "type": "string"
    },
    "sourceRoot": {
      "description": "Points at the root of the source code for the single project in standard mode structures, or the default project in monorepo mode structures.",
      "$comment": "https://github.com/nestjs/nest-cli/blob/master/actions/add.action.ts",
      "default": "src",
      "type": "string"
    }
  },
  "definitions": {
    "AssetsOptions": {
      "description": "For finer control, the element can be object.",
      "$comment": "https://docs.nestjs.com/cli/monorepo#assets",
      "type": [ "string", "object" ],
      "properties": {
        "exclude": {
          "description": "Glob-like file specifications for the assets to be excluded from the include list.",
          "type": "string"
        },
        "include": {
          "description": "Glob-like file specifications for the assets to be distributed.",
          "type": "string"
        },
        "outDir": {
          "description": "A string specifying the path (relative to the root folder) where the assets should be distributed. Defaults to the same output directory configured for compiler output.",
          "type": "string"
        },
        "watchAssets": {
          "description": "If true, run in watch mode watching specified assets. Setting watchAssets in a top-level compilerOptions property overrides any watchAssets settings within the assets property.",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "CompilerOptions": {
      "description": "A map with keys specifying compiler options and values specifying the option setting. See https://docs.nestjs.com/cli/monorepo#global-compiler-options for details",
      "$comment": "https://docs.nestjs.com/cli/monorepo#global-compiler-options",
      "default": {},
      "type": "object",
      "properties": {
        "assets": {
          "description": "Enables automatically distributing non-TypeScript assets whenever a compilation step begins (asset distribution does not happen on incremental compiles in --watch mode). Accept glob-like string and object. See https://docs.nestjs.com/cli/monorepo#assets for details.",
          "$comment": "https://docs.nestjs.com/cli/monorepo#assets",
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/AssetsOptions"
          }
        },
        "builder": {
          "anyOf": [
            {
              "description": "Builder to be used (tsc, webpack, swc). For details on how to configure `SWC` see https://docs.nestjs.com/recipes/swc#getting-started",
              "$comment": "https://github.com/nestjs/nest-cli/blob/master/commands/build.command.ts",
              "default": "tsc",
              "type": "string",
              "enum": [ "tsc", "webpack", "swc" ]
            },
            {
              "type": "object",
              "properties": {
                "type": {
                  "description": "Builder to be used (tsc, webpack, swc). For details on how to configure `SWC` see https://docs.nestjs.com/recipes/swc#getting-started",
                  "$comment": "https://github.com/nestjs/nest-cli/blob/master/commands/build.command.ts",
                  "default": "tsc",
                  "type": "string",
                  "enum": [ "tsc", "webpack", "swc" ]
                },
                "options": {
                  "type": "object",
                  "properties": {
                    "copyFiles": {
                      "description": "Whether to copy files or not.",
                      "type": "boolean"
                    },
                    "extensions": {
                      "description": "Array of file extensions to be considered.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "filenames": {
                      "description": "Array of filenames to be included.",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "includeDotfiles": {
                      "description": "Whether to include dotfiles or not.",
                      "type": "boolean"
                    },
                    "outDir": {
                      "description": "The directory to output files.",
                      "type": "string"
                    },
                    "quiet": {
                      "description": "Whether to suppress logs or not.",
                      "type": "boolean"
                    },
                    "sync": {
                      "description": "Whether to synchronize files or not.",
                      "type": "boolean"
                    },
                    "watch": {
                      "description": "Whether to watch files for changes or not.",
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          ]
        },
        "deleteOutDir": {
          "description": "If true, whenever the compiler is invoked, it will first remove the compilation output directory (as configured in tsconfig.json, where the default is ./dist).",
          "default": false,
          "type": "boolean"
        },
        "manualRestart": {
          "description": "If true, enables the shortcut `rs` to manually restart the server.",
          "default": false,
          "type": "boolean"
        },
        "plugins": {
          "$comment": "https://docs.nestjs.com/openapi/cli-plugin#using-the-cli-plugin",
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/PluginItems"
          }
        },
        "tsConfigPath": {
          "description": "(monorepo only) Points at the file containing the tsconfig.json settings that will be used when nest build or nest start is called without a project option (e.g., when the default project is built or started). 'nest build' will not work as expected without this file.",
          "$comment": "https://github.com/nestjs/nest-cli/blob/master/lib/compiler/defaults/webpac-defaults.ts",
          "default": "tsconfig.build.json",
          "type": "string"
        },
        "typeCheck": {
          "description": "If true, enable type checking (when SWC is used). See https://docs.nestjs.com/recipes/swc#type-checking for details.",
          "$comment": "https://github.com/nestjs/nest-cli/blob/master/commands/build.command.ts",
          "default": false,
          "type": "boolean"
        },
        "watchAssets": {
          "description": "If true, run in watch-mode, watching all non-TypeScript assets. Setting watchAssets in a top-level compilerOptions property overrides any watchAssets settings within the assets property.",
          "default": false,
          "type": "boolean"
        },
        "webpack": {
          "description": "If true, use webpack compiler (deprecated option, use `builder` instead). If false or not present, use tsc. In monorepo mode, the default is true (use webpack), in standard mode, the default is false (use tsc). See https://docs.nestjs.com/cli/monorepo#cli-properties for details.",
          "$comment": "https://github.com/nestjs/nest-cli/blob/master/commands/build.command.ts",
          "default": false,
          "type": "boolean"
        },
        "webpackConfigPath": {
          "description": "Points at a webpack options file. If not specified, Nest looks for the file webpack.config.js.",
          "$comment": "https://github.com/nestjs/nest-cli/blob/master/commands/build.command.ts",
          "default": "webpack.config.js",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "GenerateBaseDirOptions": {
      "description": "Base directory",
      "default": "",
      "type": "string"
    },
    "GenerateFlatOptions": {
      "description": "If true, all generate commands will generate a flat structure",
      "$comment": "https://docs.nestjs.com/cli/monorepo#global-generate-options",
      "default": false,
      "type": "boolean"
    },
    "GenerateOptions": {
      "description": "A map with keys specifying global generate options and values specifying the option setting. See https://docs.nestjs.com/cli/monorepo#global-generate-options for details",
      "$comment": "https://docs.nestjs.com/cli/monorepo#global-generate-options",
      "default": {},
      "type": "object",
      "properties": {
        "baseDir": {
          "$ref": "#/definitions/GenerateBaseDirOptions"
        },
        "flat": {
          "$ref": "#/definitions/GenerateFlatOptions"
        },
        "spec": {
          "$ref": "#/definitions/GenerateSpecOptions"
        }
      },
      "additionalProperties": false
    },
    "GenerateSpecOptions": {
      "description": "If the value is boolean, a value of true enables spec generation by default and a value of false disables it. A flag passed on the CLI command line overrides this setting, as does a project-specific generateOptions setting (more below). If the value is an object, each key represents a schematic name, and the boolean value determines whether the default spec generation is enabled / disabled for that specific schematic. See https://docs.nestjs.com/cli/monorepo#global-generate-options for details.",
      "$comment": "https://docs.nestjs.com/cli/monorepo#global-generate-options",
      "type": [ "boolean", "object" ],
      "properties": {
        "app": {
          "description": "Alias for sub-app",
          "type": "boolean"
        },
        "application": {
          "description": "Generate spec file for application schematics or not.",
          "type": "boolean"
        },
        "cl": {
          "description": "Alias for class",
          "type": "boolean"
        },
        "class": {
          "description": "Disable spec file generation for class schematics.",
          "type": "boolean"
        },
        "co": {
          "description": "Alias for controller",
          "type": "boolean"
        },
        "config": {
          "description": "Alias for configuration",
          "type": "boolean"
        },
        "configuration": {
          "description": "Generate spec file for configuration schematics or not.",
          "type": "boolean"
        },
        "controller": {
          "description": "Generate spec file for controller schematics or not.",
          "type": "boolean"
        },
        "d": {
          "description": "Alias for decorator",
          "type": "boolean"
        },
        "decorator": {
          "description": "Generate spec file for decorator schematics or not.",
          "type": "boolean"
        },
        "f": {
          "description": "Alias for filter",
          "type": "boolean"
        },
        "filter": {
          "description": "Generate spec file for filter schematics or not.",
          "type": "boolean"
        },
        "ga": {
          "description": "Alias for gateway",
          "type": "boolean"
        },
        "gateway": {
          "description": "Generate spec file for gateway schematics or not.",
          "type": "boolean"
        },
        "gu": {
          "description": "Alias for guard",
          "type": "boolean"
        },
        "guard": {
          "description": "Generate spec file for guard schematics or not.",
          "type": "boolean"
        },
        "in": {
          "description": "Alias for interceptor",
          "type": "boolean"
        },
        "interceptor": {
          "description": "Generate spec file for interceptor schematics or not.",
          "type": "boolean"
        },
        "interface": {
          "description": "Generate spec file for interface schematics or not.",
          "type": "boolean"
        },
        "lib": {
          "description": "Alias for library",
          "type": "boolean"
        },
        "library": {
          "description": "Generate spec file for library schematics or not.",
          "type": "boolean"
        },
        "mi": {
          "description": "Alias for middleware",
          "type": "boolean"
        },
        "middleware": {
          "description": "Generate spec file for middleware schematics or not.",
          "type": "boolean"
        },
        "mo": {
          "description": "Alias for module",
          "type": "boolean"
        },
        "module": {
          "description": "Generate spec file for module schematics or not.",
          "type": "boolean"
        },
        "pi": {
          "description": "Alias for pipe",
          "type": "boolean"
        },
        "pipe": {
          "description": "Generate spec file for pipe schematics or not.",
          "type": "boolean"
        },
        "pr": {
          "description": "Alias for provider",
          "type": "boolean"
        },
        "provider": {
          "description": "Generate spec file for provider schematics or not.",
          "type": "boolean"
        },
        "r": {
          "description": "Alias for resolver",
          "type": "boolean"
        },
        "res": {
          "description": "Alias for resource",
          "type": "boolean"
        },
        "resolver": {
          "description": "Generate spec file for resolver schematics or not.",
          "type": "boolean"
        },
        "resource": {
          "description": "Generate spec file for resource schematics or not.",
          "type": "boolean"
        },
        "s": {
          "description": "Alias for resolver",
          "type": "boolean"
        },
        "service": {
          "description": "Generate spec file for service schematics or not.",
          "type": "boolean"
        },
        "sub-app": {
          "description": "Generate spec file for sub-app schematics or not.",
          "type": "boolean"
        }
      },
      "additionalProperties": false
    },
    "GraphQLPluginOptions": {
      "$comment": "https://docs.nestjs.com/graphql/cli-plugin#using-the-cli-plugin",
      "type": "object",
      "properties": {
        "typeFileNameSuffix": {
          "description": "(GraphQL Only) GraphQL types files suffix. Default value: ['.input.ts', '.args.ts', '.entity.ts', '.model.ts']. See https://docs.nestjs.com/graphql/cli-plugin#using-the-cli-plugin for details.",
          "default": [ ".input.ts", ".args.ts", ".entity.ts", ".model.ts" ],
          "type": "array"
        }
      }
    },
    "PluginItems": {
      "$comment": "https://docs.nestjs.com/openapi/cli-plugin#using-the-cli-plugin",
      "type": [ "string", "object" ],
      "properties": {
        "name": {
          "description": "The npm package name of the cli plugin, eg @nestjs/swagger.",
          "type": "string"
        },
        "options": {
          "anyOf": [
            {
              "$ref": "#/definitions/PluginOptions"
            },
            {
              "$ref": "#/definitions/GraphQLPluginOptions"
            },
            {
              "$ref": "#/definitions/SwaggerPluginOptions"
            }
          ]
        }
      }
    },
    "PluginOptions": {
      "type": "object",
      "properties": {
        "introspectComments": {
          "description": "If set to true, plugin will generate descriptions and example values for properties based on comments.",
          "default": true,
          "type": "boolean"
        }
      }
    },
    "ProjectConfiguration": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "compilerOptions": {
          "$ref": "#/definitions/CompilerOptions"
        },
        "entryFile": {
          "type": "string"
        },
        "generateOptions": {
          "$ref": "#/definitions/GenerateOptions"
        },
        "root": {
          "type": "string"
        },
        "sourceRoot": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "SwaggerPluginOptions": {
      "$comment": "https://docs.nestjs.com/openapi/cli-plugin#using-the-cli-plugin",
      "type": "object",
      "properties": {
        "classValidatorShim": {
          "description": "(Swagger Only) If set to true, the module will reuse class-validator validation decorators (e.g. @Max(10) will add max: 10 to schema definition). See https://docs.nestjs.com/openapi/cli-plugin#using-the-cli-plugin for details",
          "default": true,
          "type": "boolean"
        },
        "controllerFileNameSuffix": {
          "description": "(Swagger Only) Controller files suffix. See https://docs.nestjs.com/openapi/cli-plugin#using-the-cli-plugin for details",
          "default": ".controller.ts",
          "type": "string"
        },
        "controllerKeyOfComment": {
          "description": "(Swagger Only) The property key to set the comment text to on ApiOperation. See https://docs.nestjs.com/openapi/cli-plugin#using-the-cli-plugin for details",
          "default": "description",
          "type": "string"
        },
        "dtoFileNameSuffix": {
          "description": "(Swagger Only) DTO (Data Transfer Object) files suffix. Default value: ['.dto.ts', '.entity.ts']. See https://docs.nestjs.com/openapi/cli-plugin#using-the-cli-plugin for details",
          "default": [ ".dto.ts", ".entity.ts" ],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dtoKeyOfComment": {
          "description": "(Swagger Only) The property key to set the comment text to on ApiProperty. See https://docs.nestjs.com/openapi/cli-plugin#using-the-cli-plugin for details",
          "default": "description",
          "type": "string"
        }
      }
    }
  }
}
