{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://deno.land/x/deno/cli/schemas/config-file.v1.json",
  "title": "Deno configuration file Schema",
  "description": "A JSON representation of a Deno configuration file.",
  "type": "object",
  "required": [],
  "properties": {
    "bench": {
      "description": "Configuration for deno bench",
      "type": "object",
      "properties": {
        "exclude": {
          "description": "List of files, directories or globs that will not be searched for benchmarks.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "files": {
          "type": "object",
          "properties": {
            "exclude": {
              "description": "List of files, directories or globs that will not be searched for benchmarks.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "include": {
              "description": "List of files, directories or globs that will be searched for benchmarks.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "include": {
          "description": "List of files, directories or globs that will be searched for benchmarks.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "compilerOptions": {
      "description": "Instructs the TypeScript compiler how to compile .ts files.",
      "type": "object",
      "properties": {
        "allowJs": {
          "description": "Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files.",
          "default": true,
          "type": "boolean",
          "markdownDescription": "Allow JavaScript files to be a part of your program. Use the `checkJS` option to get errors from these files.\n\nSee more: https://www.typescriptlang.org/tsconfig#allowJs"
        },
        "allowUnreachableCode": {
          "description": "Disable error reporting for unreachable code.",
          "default": false,
          "type": "boolean",
          "markdownDescription": "Disable error reporting for unreachable code.\n\nSee more: https://www.typescriptlang.org/tsconfig#allowUnreachableCode"
        },
        "allowUnusedLabels": {
          "description": "Disable error reporting for unused labels.",
          "default": false,
          "type": "boolean",
          "markdownDescription": "Disable error reporting for unused labels.\n\nSee more: https://www.typescriptlang.org/tsconfig#allowUnusedLabels"
        },
        "checkJs": {
          "description": "Enable error reporting in type-checked JavaScript files.",
          "default": false,
          "type": "boolean",
          "markdownDescription": "Enable error reporting in type-checked JavaScript files.\n\nSee more: https://www.typescriptlang.org/tsconfig#checkJs"
        },
        "exactOptionalPropertyTypes": {
          "description": "Differentiate between undefined and not present when type checking",
          "default": false,
          "type": "boolean",
          "markdownDescription": "Differentiate between undefined and not present when type checking\n\nSee more: https://www.typescriptlang.org/tsconfig#exactOptionalPropertyTypes"
        },
        "experimentalDecorators": {
          "description": "Enable experimental support for TC39 stage 2 draft decorators.",
          "default": true,
          "type": "boolean",
          "markdownDescription": "Enable experimental support for TC39 stage 2 draft decorators.\n\nSee more: https://www.typescriptlang.org/tsconfig#experimentalDecorators"
        },
        "jsx": {
          "description": "Specify what JSX code is generated.",
          "default": "react",
          "enum": [
            "preserve",
            "react",
            "react-jsx",
            "react-jsxdev",
            "react-native"
          ]
        },
        "jsxFactory": {
          "description": "Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'",
          "default": "React.createElement",
          "type": "string",
          "markdownDescription": "Specify the JSX factory function used when targeting React JSX emit, e.g. 'React.createElement' or 'h'\n\nSee more: https://www.typescriptlang.org/tsconfig#jsxFactory"
        },
        "jsxFragmentFactory": {
          "description": "Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'.",
          "default": "React.Fragment",
          "type": "string",
          "markdownDescription": "Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. 'React.Fragment' or 'Fragment'.\n\nSee more: https://www.typescriptlang.org/tsconfig#jsxFragmentFactory"
        },
        "jsxImportSource": {
          "description": "Specify module specifier used to import the JSX factory functions when using jsx: 'react-jsx*'.",
          "default": "react",
          "type": "string",
          "markdownDescription": "Specify module specifier used to import the JSX factory functions when using jsx: `react-jsx*`.\n\nSee more: https://www.typescriptlang.org/tsconfig/#jsxImportSource"
        },
        "keyofStringsOnly": {
          "description": "Make keyof only return strings instead of string, numbers or symbols. Legacy option.",
          "default": false,
          "type": "boolean",
          "markdownDescription": "Make keyof only return strings instead of string, numbers or symbols. Legacy option.\n\nSee more: https://www.typescriptlang.org/tsconfig#keyofStringsOnly"
        },
        "lib": {
          "description": "Specify a set of bundled library declaration files that describe the target runtime environment.",
          "default": [ "deno.window" ],
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          },
          "markdownDescription": "Specify a set of bundled library declaration files that describe the target runtime environment.\n\nSee more: https://www.typescriptlang.org/tsconfig#lib"
        },
        "noErrorTruncation": {
          "description": "Do not truncate error messages.",
          "default": false,
          "type": "boolean",
          "markdownDescription": "Do not truncate error messages.\n\nSee more: https://www.typescriptlang.org/tsconfig#noErrorTruncation"
        },
        "noFallthroughCasesInSwitch": {
          "description": "Enable error reporting for fallthrough cases in switch statements.",
          "default": false,
          "type": "boolean",
          "markdownDescription": "Enable error reporting for fallthrough cases in switch statements.\n\nSee more: https://www.typescriptlang.org/tsconfig#noFallthroughCasesInSwitch"
        },
        "noImplicitAny": {
          "description": "Enable error reporting for expressions and declarations with an implied `any` type..",
          "default": true,
          "type": "boolean",
          "markdownDescription": "Enable error reporting for expressions and declarations with an implied `any` type..\n\nSee more: https://www.typescriptlang.org/tsconfig#noImplicitAny"
        },
        "noImplicitOverride": {
          "description": "Ensure overriding members in derived classes are marked with an override modifier.",
          "default": false,
          "type": "boolean",
          "markdownDescription": "Ensure overriding members in derived classes are marked with an override modifier.\n\nSee more: https://www.typescriptlang.org/tsconfig#noImplicitOverride"
        },
        "noImplicitReturns": {
          "description": "Enable error reporting for codepaths that do not explicitly return in a function.",
          "default": false,
          "type": "boolean",
          "markdownDescription": "Enable error reporting for codepaths that do not explicitly return in a function.\n\nSee more: https://www.typescriptlang.org/tsconfig#noImplicitReturns"
        },
        "noImplicitThis": {
          "description": "Enable error reporting when `this` is given the type `any`.",
          "default": true,
          "type": "boolean",
          "markdownDescription": "Enable error reporting when `this` is given the type `any`.\n\nSee more: https://www.typescriptlang.org/tsconfig#noImplicitThis"
        },
        "noImplicitUseStrict": {
          "description": "Disable adding 'use strict' directives in emitted JavaScript files.",
          "default": true,
          "type": "boolean",
          "markdownDescription": "Disable adding 'use strict' directives in emitted JavaScript files.\n\nSee more: https://www.typescriptlang.org/tsconfig#noImplicitUseStrict"
        },
        "noStrictGenericChecks": {
          "description": "Disable strict checking of generic signatures in function types.",
          "default": false,
          "type": "boolean",
          "markdownDescription": "Disable strict checking of generic signatures in function types.\n\nSee more: https://www.typescriptlang.org/tsconfig#noStrictGenericChecks"
        },
        "noUncheckedIndexedAccess": {
          "description": "Add `undefined` to a type when accessed using an index.",
          "default": false,
          "type": "boolean",
          "markdownDescription": "Add `undefined` to a type when accessed using an index.\n\nSee more: https://www.typescriptlang.org/tsconfig#noUncheckedIndexedAccess"
        },
        "noUnusedLocals": {
          "description": "Enable error reporting when a local variables aren't read.",
          "default": false,
          "type": "boolean",
          "markdownDescription": "Enable error reporting when a local variables aren't read.\n\nSee more: https://www.typescriptlang.org/tsconfig#noUnusedLocals"
        },
        "noUnusedParameters": {
          "description": "Raise an error when a function parameter isn't read",
          "default": false,
          "type": "boolean",
          "markdownDescription": "Raise an error when a function parameter isn't read\n\nSee more: https://www.typescriptlang.org/tsconfig#noUnusedParameters"
        },
        "strict": {
          "description": "Enable all strict type checking options.",
          "default": true,
          "type": "boolean",
          "markdownDescription": "Enable all strict type checking options.\n\nSee more: https://www.typescriptlang.org/tsconfig#strict"
        },
        "strictBindCallApply": {
          "description": "Check that the arguments for `bind`, `call`, and `apply` methods match the original function.",
          "default": true,
          "type": "boolean",
          "markdownDescription": "Check that the arguments for `bind`, `call`, and `apply` methods match the original function.\n\nSee more: https://www.typescriptlang.org/tsconfig#strictBindCallApply"
        },
        "strictFunctionTypes": {
          "description": "When assigning functions, check to ensure parameters and the return values are subtype-compatible.",
          "default": true,
          "type": "boolean",
          "markdownDescription": "When assigning functions, check to ensure parameters and the return values are subtype-compatible.\n\nSee more: https://www.typescriptlang.org/tsconfig#strictFunctionTypes"
        },
        "strictNullChecks": {
          "description": "When type checking, take into account `null` and `undefined`.",
          "default": true,
          "type": "boolean",
          "markdownDescription": "When type checking, take into account `null` and `undefined`.\n\nSee more: https://www.typescriptlang.org/tsconfig#strictNullChecks"
        },
        "strictPropertyInitialization": {
          "description": "Check for class properties that are declared but not set in the constructor.",
          "default": true,
          "type": "boolean",
          "markdownDescription": "Check for class properties that are declared but not set in the constructor.\n\nSee more: https://www.typescriptlang.org/tsconfig#strictPropertyInitialization"
        },
        "suppressExcessPropertyErrors": {
          "description": "Disable reporting of excess property errors during the creation of object literals.",
          "default": false,
          "type": "boolean",
          "markdownDescription": "Disable reporting of excess property errors during the creation of object literals.\n\nSee more: https://www.typescriptlang.org/tsconfig#suppressExcessPropertyErrors"
        },
        "suppressImplicitAnyIndexErrors": {
          "description": "Suppress `noImplicitAny` errors when indexing objects that lack index signatures.",
          "default": false,
          "type": "boolean",
          "markdownDescription": "Suppress `noImplicitAny` errors when indexing objects that lack index signatures.\n\nSee more: https://www.typescriptlang.org/tsconfig#suppressImplicitAnyIndexErrors"
        }
      }
    },
    "exclude": {
      "description": "List of files, directories or globs that will be ignored by all other configurations. Requires Deno 1.34 or later.",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "fmt": {
      "description": "Configuration for formatter",
      "type": "object",
      "properties": {
        "exclude": {
          "description": "List of files, directories or globs that will not be formatted.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "files": {
          "type": "object",
          "properties": {
            "exclude": {
              "description": "List of files, directories or globs that will not be formatted.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "include": {
              "description": "List of files, directories or globs that will be formatted.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "include": {
          "description": "List of files, directories or globs that will be formatted.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "indentWidth": {
          "description": "The number of characters for an indent.",
          "default": 2,
          "type": "number"
        },
        "lineWidth": {
          "description": "The width of a line the printer will try to stay under. Note that the printer may exceed this width in certain cases.",
          "default": 80,
          "type": "number"
        },
        "options": {
          "type": "object",
          "properties": {
            "indentWidth": {
              "description": "The number of characters for an indent.",
              "default": 2,
              "type": "number"
            },
            "lineWidth": {
              "description": "The width of a line the printer will try to stay under. Note that the printer may exceed this width in certain cases.",
              "default": 80,
              "type": "number"
            },
            "proseWrap": {
              "description": "Define how prose should be wrapped in Markdown files.",
              "default": "always",
              "enum": [ "always", "never", "preserve" ]
            },
            "semiColons": {
              "description": "Whether to prefer using semicolons.",
              "default": true,
              "type": "boolean"
            },
            "singleQuote": {
              "description": "Whether to use single quote (true) or double quote (false) for quotation.",
              "default": false,
              "type": "boolean"
            },
            "useTabs": {
              "description": "Whether to use tabs (true) or spaces (false) for indentation.",
              "default": false,
              "type": "boolean"
            }
          }
        },
        "proseWrap": {
          "description": "Define how prose should be wrapped in Markdown files.",
          "default": "always",
          "enum": [ "always", "never", "preserve" ]
        },
        "semiColons": {
          "description": "Whether to prefer using semicolons.",
          "default": true,
          "type": "boolean"
        },
        "singleQuote": {
          "description": "Whether to use single quote (true) or double quote (false) for quotation.",
          "default": false,
          "type": "boolean"
        },
        "useTabs": {
          "description": "Whether to use tabs (true) or spaces (false) for indentation.",
          "default": false,
          "type": "boolean"
        }
      }
    },
    "importMap": {
      "description": "The location of an import map to be used when resolving modules. If an import map is specified as an `--importmap` flag or using \"imports\" and \"scopes\" properties, they will override this value.",
      "type": "string"
    },
    "imports": {
      "description": "A map of specifiers to their remapped specifiers.",
      "type": "object",
      "additionalProperties": {
        "description": "The key is the specifier or partial specifier to match, with a value that represents the target specifier.",
        "type": "string"
      }
    },
    "lint": {
      "description": "Configuration for linter",
      "type": "object",
      "properties": {
        "exclude": {
          "description": "List of files, directories or globs that will not be linted.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "files": {
          "type": "object",
          "properties": {
            "exclude": {
              "description": "List of files, directories or globs that will not be linted.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "include": {
              "description": "List of files, directories or globs that will be linted.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "include": {
          "description": "List of files, directories or globs that will be linted.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "report": {
          "description": "The default report format to use when linting",
          "default": "pretty",
          "enum": [ "pretty", "json", "compact" ]
        },
        "rules": {
          "type": "object",
          "properties": {
            "exclude": {
              "description": "List of rule names that will be excluded from configured tag sets. If the same rule is in `include` it will be run.",
              "type": "array",
              "minItems": 0,
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "include": {
              "description": "List of rule names that will be run. Even if the same rule is in `exclude` it will be run.",
              "type": "array",
              "minItems": 0,
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "tags": {
              "description": "List of tag names that will be run. Empty list disables all tags and will only use rules from `include`.",
              "type": "array",
              "minItems": 0,
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "lock": {
      "description": "Whether to use a lock file or the path to use for the lock file. Can be overridden by CLI arguments.",
      "default": true,
      "type": [ "string", "boolean" ]
    },
    "nodeModulesDir": {
      "description": "Enables or disables the use of a local node_modules folder for npm packages. Alternatively, use the `--node-modules-dir` flag or override the config via `--node-modules-dir=false`. Requires Deno 1.34 or later.",
      "type": "boolean"
    },
    "scopes": {
      "description": "Define a scope which remaps a specifier in only a specified scope",
      "default": {},
      "type": "object",
      "properties": {},
      "additionalProperties": {
        "description": "A definition of a scoped remapping.",
        "type": "object",
        "additionalProperties": {
          "description": "The key is the specifier or partial specifier to match within the referring scope, with a value that represents the target specifier.",
          "type": "string"
        }
      }
    },
    "tasks": {
      "description": "Configuration for deno task",
      "type": "object",
      "patternProperties": {
        "^[A-Za-z][A-Za-z0-9_\\-:]*$": {
          "description": "Command to execute for this task name.",
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "test": {
      "description": "Configuration for deno test",
      "type": "object",
      "properties": {
        "exclude": {
          "description": "List of files, directories or globs that will not be searched for tests.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "files": {
          "type": "object",
          "properties": {
            "exclude": {
              "description": "List of files, directories or globs that will not be searched for tests.",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "include": {
              "description": "List of files, directories or globs that will be searched for tests.",
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "include": {
          "description": "List of files, directories or globs that will be searched for tests.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "vendor": {
      "description": "UNSTABLE: Enables or disables the use of a local vendor folder as a local cache for remote modules and node_modules folder for npm packages. Alternatively, use the `--vendor` flag or override the config via `--vendor=false`. Requires Deno 1.36.1 or later.",
      "type": "boolean"
    }
  }
}
