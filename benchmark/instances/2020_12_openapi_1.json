{
  "paths": {
    "/companies": {
      "get": {
        "description": "Returns the list of company accounts that your API credential has access to. The list is grouped into pages as defined by the query parameters.\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n\n* Management API—Account read",
        "operationId": "get-companies",
        "parameters": [
          {
            "description": "The number of the page to fetch.",
            "in": "query",
            "name": "pageNumber",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The number of items to have on a page, maximum 100. The default is 10 items on a page.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-companies-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ListCompanyResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a list of company accounts",
        "tags": [
          "Account - company level"
        ],
        "x-methodName": "listCompanyAccounts",
        "x-sortIndex": 0
      }
    },
    "/companies/{companyId}": {
      "get": {
        "description": "Returns the company account specified in the path. Your API credential must have access to the company account. \n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Account read",
        "operationId": "get-companies-companyId",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-companies-companyId-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a company account",
        "tags": [
          "Account - company level"
        ],
        "x-methodName": "getCompanyAccount",
        "x-sortIndex": 0
      }
    },
    "/companies/{companyId}/androidApps": {
      "get": {
        "description": "Returns a list of the Android apps that are available for the company identified in the path. \nThese apps have been uploaded to Adyen and can be installed or uninstalled on Android payment terminals through [terminal actions](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api).\n\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Android files read\n* Management API—Android files read and write\n* Management API—Terminal actions read\n* Management API—Terminal actions read and write",
        "operationId": "get-companies-companyId-androidApps",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of the page to fetch.",
            "in": "query",
            "name": "pageNumber",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The number of items to have on a page, maximum 100. The default is 20 items on a page.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The package name that uniquely identifies the Android app.",
            "in": "query",
            "name": "packageName",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The version number of the app.",
            "in": "query",
            "name": "versionCode",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-companies-companyId-androidApps-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AndroidAppsResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a list of Android apps",
        "tags": [
          "Android files - company level"
        ],
        "x-methodName": "listAndroidApps",
        "x-sortIndex": 1
      }
    },
    "/companies/{companyId}/androidApps/{id}": {
      "get": {
        "description": "Returns the details of the Android app identified in the path. \nThese apps have been uploaded to Adyen and can be installed or uninstalled on Android payment terminals through [terminal actions](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api).\n\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Android files read\n* Management API—Android files read and write",
        "operationId": "get-companies-companyId-androidApps-id",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier of the app.",
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AndroidApp"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get Android app",
        "tags": [
          "Android files - company level"
        ],
        "x-methodName": "getAndroidApp",
        "x-sortIndex": 3
      }
    },
    "/companies/{companyId}/androidCertificates": {
      "get": {
        "description": "Returns a list of the Android certificates that are available for the company identified in the path.\nTypically, these certificates enable running apps on Android payment terminals. The certifcates in the list have been uploaded to Adyen and can be installed or uninstalled on Android terminals through [terminal actions](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api).\n\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Android files read\n* Management API—Android files read and write\n* Management API—Terminal actions read\n* Management API—Terminal actions read and write",
        "operationId": "get-companies-companyId-androidCertificates",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of the page to fetch.",
            "in": "query",
            "name": "pageNumber",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The number of items to have on a page, maximum 100. The default is 20 items on a page.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The name of the certificate.",
            "in": "query",
            "name": "certificateName",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-companies-companyId-androidCertificates-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AndroidCertificatesResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a list of Android certificates",
        "tags": [
          "Android files - company level"
        ],
        "x-methodName": "listAndroidCertificates",
        "x-sortIndex": 2
      }
    },
    "/companies/{companyId}/apiCredentials": {
      "get": {
        "description": "Returns the list of [API credentials](https://docs.adyen.com/development-resources/api-credentials) for the company account. The list is grouped into pages as defined by the query parameters.\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—API credentials read and write",
        "operationId": "get-companies-companyId-apiCredentials",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of the page to fetch.",
            "in": "query",
            "name": "pageNumber",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The number of items to have on a page, maximum 100. The default is 10 items on a page.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-companies-companyId-apiCredentials-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ListCompanyApiCredentialsResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a list of API credentials",
        "tags": [
          "API credentials - company level"
        ],
        "x-methodName": "listApiCredentials",
        "x-sortIndex": 0
      },
      "post": {
        "description": "Creates an [API credential](https://docs.adyen.com/development-resources/api-credentials) for the company account identified in the path. In the request, you can specify which merchant accounts the new API credential will have access to, as well as its roles and allowed origins.\n\nThe response includes several types of authentication details:\n* [API key](https://docs.adyen.com/development-resources/api-authentication#api-key-authentication): used for API request authentication.\n* [Client key](https://docs.adyen.com/development-resources/client-side-authentication#how-it-works): public key used for client-side authentication.\n* [Username and password](https://docs.adyen.com/development-resources/api-authentication#using-basic-authentication): used for basic authentication.\n\n> Make sure you store the API key securely in your system. You won't be able to retrieve it later.\n\nIf your API key is lost or compromised, you need to [generate a new API key](https://docs.adyen.com/api-explorer/#/ManagementService/v1/post/companies/{companyId}/apiCredentials/{apiCredentialId}/generateApiKey).\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—API credentials read and write",
        "operationId": "post-companies-companyId-apiCredentials",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "post-company-credential": {
                  "$ref": "#/components/examples/post-companies-companyId-apiCredentials-post-company-credential"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/CreateCompanyApiCredentialRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "post-company-credential": {
                    "$ref": "#/components/examples/post-companies-companyId-apiCredentials-post-company-credential-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/CreateCompanyApiCredentialResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create an API credential.",
        "tags": [
          "API credentials - company level"
        ],
        "x-methodName": "createApiCredential",
        "x-sortIndex": 0
      }
    },
    "/companies/{companyId}/apiCredentials/{apiCredentialId}": {
      "get": {
        "description": "Returns the [API credential](https://docs.adyen.com/development-resources/api-credentials) identified in the path.\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—API credentials read and write",
        "operationId": "get-companies-companyId-apiCredentials-apiCredentialId",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the API credential.",
            "in": "path",
            "name": "apiCredentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-companies-companyId-apiCredentials-apiCredentialId-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/CompanyApiCredential"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get an API credential",
        "tags": [
          "API credentials - company level"
        ],
        "x-methodName": "getApiCredential",
        "x-sortIndex": 0
      },
      "patch": {
        "description": "Changes the API credential's roles, merchant account access, or allowed origins. The request has the new values for the fields you want to change. The response contains the full updated API credential, including the new values from the request. \n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—API credentials read and write",
        "operationId": "patch-companies-companyId-apiCredentials-apiCredentialId",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the API credential.",
            "in": "path",
            "name": "apiCredentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "patch-company-credential": {
                  "$ref": "#/components/examples/patch-companies-companyId-apiCredentials-apiCredentialId-patch-company-credential"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateCompanyApiCredentialRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "patch-company-credential": {
                    "$ref": "#/components/examples/patch-companies-companyId-apiCredentials-apiCredentialId-patch-company-credential-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/CompanyApiCredential"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update an API credential.",
        "tags": [
          "API credentials - company level"
        ],
        "x-methodName": "updateApiCredential",
        "x-sortIndex": 0
      }
    },
    "/companies/{companyId}/apiCredentials/{apiCredentialId}/allowedOrigins": {
      "get": {
        "description": "Returns the list of [allowed origins](https://docs.adyen.com/development-resources/client-side-authentication#allowed-origins) for the API credential identified in the path.\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—API credentials read and write",
        "operationId": "get-companies-companyId-apiCredentials-apiCredentialId-allowedOrigins",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the API credential.",
            "in": "path",
            "name": "apiCredentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "get-allowed-origins": {
                    "$ref": "#/components/examples/get-companies-companyId-apiCredentials-apiCredentialId-allowedOrigins-get-allowed-origins-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AllowedOriginsResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a list of allowed origins",
        "tags": [
          "Allowed origins - company level"
        ],
        "x-methodName": "listAllowedOrigins",
        "x-sortIndex": 0
      },
      "post": {
        "description": "Adds a new [allowed origin](https://docs.adyen.com/development-resources/client-side-authentication#allowed-origins) to the API credential's list of allowed origins.\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—API credentials read and write",
        "operationId": "post-companies-companyId-apiCredentials-apiCredentialId-allowedOrigins",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the API credential.",
            "in": "path",
            "name": "apiCredentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "add-allowed-origin": {
                  "$ref": "#/components/examples/post-companies-companyId-apiCredentials-apiCredentialId-allowedOrigins-add-allowed-origin"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/AllowedOrigin"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "add-allowed-origin": {
                    "$ref": "#/components/examples/post-companies-companyId-apiCredentials-apiCredentialId-allowedOrigins-add-allowed-origin-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AllowedOriginsResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create an allowed origin",
        "tags": [
          "Allowed origins - company level"
        ],
        "x-methodName": "createAllowedOrigin",
        "x-sortIndex": 0
      }
    },
    "/companies/{companyId}/apiCredentials/{apiCredentialId}/allowedOrigins/{originId}": {
      "delete": {
        "description": "Removes the [allowed origin](https://docs.adyen.com/development-resources/client-side-authentication#allowed-origins) identified in the path. As soon as an allowed origin is removed, we no longer accept client-side requests from that domain.\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—API credentials read and write",
        "operationId": "delete-companies-companyId-apiCredentials-apiCredentialId-allowedOrigins-originId",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the API credential.",
            "in": "path",
            "name": "apiCredentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the allowed origin.",
            "in": "path",
            "name": "originId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - look at the actual response code for the status of the request. "
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Delete an allowed origin",
        "tags": [
          "Allowed origins - company level"
        ],
        "x-methodName": "deleteAllowedOrigin",
        "x-sortIndex": 0
      },
      "get": {
        "description": "Returns the [allowed origin](https://docs.adyen.com/development-resources/client-side-authentication#allowed-origins) identified in the path.\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—API credentials read and write",
        "operationId": "get-companies-companyId-apiCredentials-apiCredentialId-allowedOrigins-originId",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the API credential.",
            "in": "path",
            "name": "apiCredentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the allowed origin.",
            "in": "path",
            "name": "originId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "get-allowed-origin": {
                    "$ref": "#/components/examples/get-companies-companyId-apiCredentials-apiCredentialId-allowedOrigins-originId-get-allowed-origin-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AllowedOrigin"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get an allowed origin",
        "tags": [
          "Allowed origins - company level"
        ],
        "x-methodName": "getAllowedOrigin",
        "x-sortIndex": 0
      }
    },
    "/companies/{companyId}/apiCredentials/{apiCredentialId}/generateApiKey": {
      "post": {
        "description": "Returns a new API key for the API credential. You can use the new API key a few minutes after generating it. The old API key stops working 24 hours after generating a new one.\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—API credentials read and write",
        "operationId": "post-companies-companyId-apiCredentials-apiCredentialId-generateApiKey",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the API credential.",
            "in": "path",
            "name": "apiCredentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateApiKeyResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Generate new API key",
        "tags": [
          "API key - company level"
        ],
        "x-methodName": "generateNewApiKey",
        "x-sortIndex": 0
      }
    },
    "/companies/{companyId}/apiCredentials/{apiCredentialId}/generateClientKey": {
      "post": {
        "description": "Returns a new [client key](https://docs.adyen.com/development-resources/client-side-authentication#how-it-works) for the API credential identified in the path. You can use the new client key a few minutes after generating it. The old client key stops working 24 hours after generating a new one.\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—API credentials read and write",
        "operationId": "post-companies-companyId-apiCredentials-apiCredentialId-generateClientKey",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the API credential.",
            "in": "path",
            "name": "apiCredentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateClientKeyResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Generate new client key",
        "tags": [
          "Client key - company level"
        ],
        "x-methodName": "generateNewClientKey",
        "x-sortIndex": 0
      }
    },
    "/companies/{companyId}/billingEntities": {
      "get": {
        "description": "Returns the billing entities of the company identified in the path and all merchant accounts belonging to the company.\nA billing entity is a legal entity where we charge orders to. An order for terminal products must contain the ID of a billing entity.\n\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal ordering read\n* Management API—Terminal ordering read and write",
        "operationId": "get-companies-companyId-billingEntities",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the billing entity.",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-companies-companyId-billingEntities-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/BillingEntitiesResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a list of billing entities",
        "tags": [
          "Terminal orders - company level"
        ],
        "x-methodName": "listBillingEntities",
        "x-sortIndex": 3
      }
    },
    "/companies/{companyId}/merchants": {
      "get": {
        "description": "Returns the list of merchant accounts under the company account specified in the path. The list only includes merchant accounts that your API credential has access to. The list is grouped into pages as defined by the query parameters. \n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Account read",
        "operationId": "get-companies-companyId-merchants",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of the page to fetch.",
            "in": "query",
            "name": "pageNumber",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The number of items to have on a page, maximum 100. The default is 10 items on a page.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-companies-companyId-merchants-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ListMerchantResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a list of merchant accounts",
        "tags": [
          "Account - company level"
        ],
        "x-methodName": "listMerchantAccounts",
        "x-sortIndex": 0
      }
    },
    "/companies/{companyId}/shippingLocations": {
      "get": {
        "description": "Returns the shipping locations for the company identified in the path and all merchant accounts belonging to the company.\nA shipping location includes the address where orders can be delivered, and an ID which you need to specify when ordering terminal products.\n\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal ordering read\n* Management API—Terminal ordering read and write",
        "operationId": "get-companies-companyId-shippingLocations",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the shipping location.",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of locations to skip.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The number of locations to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-companies-companyId-shippingLocations-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ShippingLocationsResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a list of shipping locations",
        "tags": [
          "Terminal orders - company level"
        ],
        "x-methodName": "listShippingLocations",
        "x-sortIndex": 4
      },
      "post": {
        "description": "Creates a shipping location for the company identified in the path. A shipping location defines an address where orders can be delivered.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal ordering read and write",
        "operationId": "post-companies-companyId-shippingLocations",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "create-shipping-location": {
                  "$ref": "#/components/examples/post-companies-companyId-shippingLocations-create-shipping-location"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/ShippingLocation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "create-shipping-location": {
                    "$ref": "#/components/examples/post-companies-companyId-shippingLocations-create-shipping-location-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ShippingLocation"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create a shipping location",
        "tags": [
          "Terminal orders - company level"
        ],
        "x-methodName": "createShippingLocation",
        "x-sortIndex": 5
      }
    },
    "/companies/{companyId}/terminalActions": {
      "get": {
        "description": "Returns the [terminal actions](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api) that have been scheduled for the company identified in the path.The response doesn't include actions that are scheduled by Adyen.\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal actions read\n* Management API—Terminal actions read and write",
        "operationId": "get-companies-companyId-terminalActions",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of the page to fetch.",
            "in": "query",
            "name": "pageNumber",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The number of items to have on a page, maximum 100. The default is 20 items on a page.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "Returns terminal actions with the specified status. \nAllowed values: **pending**, **successful**, **failed**, **cancelled**, **tryLater**.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Returns terminal actions of the specified type. \nAllowed values: **InstallAndroidApp**, **UninstallAndroidApp**, **InstallAndroidCertificate**, **UninstallAndroidCertificate**.",
            "in": "query",
            "name": "type",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-companies-companyId-terminalActions-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ListExternalTerminalActionsResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a list of terminal actions",
        "tags": [
          "Terminal actions - company level"
        ],
        "x-methodName": "listTerminalActions",
        "x-sortIndex": 1
      }
    },
    "/companies/{companyId}/terminalActions/{actionId}": {
      "get": {
        "description": "Returns the details of the [terminal action](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api) identified in the path.\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal actions read\n* Management API—Terminal actions read and write",
        "operationId": "get-companies-companyId-terminalActions-actionId",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier of the terminal action.",
            "in": "path",
            "name": "actionId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-companies-companyId-terminalActions-actionId-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ExternalTerminalAction"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get terminal action",
        "tags": [
          "Terminal actions - company level"
        ],
        "x-methodName": "getTerminalAction",
        "x-sortIndex": 2
      }
    },
    "/companies/{companyId}/terminalLogos": {
      "get": {
        "description": "Returns the logo that is configured for a specific payment terminal model at the company identified in the path. \n\nThe logo is returned as a Base64-encoded string. You need to Base64-decode the string to get the actual image file. \nThis logo applies to all terminals of the specified model under the company, unless a different logo is configured at a lower level (merchant account, store, or individual terminal).\n\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal settings read\n* Management API—Terminal settings read and write",
        "operationId": "get-companies-companyId-terminalLogos",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The terminal model. Possible values: E355, VX675WIFIBT, VX680, VX690, VX700, VX820, M400, MX925, P400Plus, UX300, UX410, V200cPlus, V240mPlus, V400cPlus, V400m, e280, e285, e285p, S1E, S1EL, S1F2, S1L, S1U, S7T.",
            "in": "query",
            "name": "model",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-companies-companyId-terminalLogos-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Logo"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get the terminal logo",
        "tags": [
          "Terminal settings - company level"
        ],
        "x-methodName": "getTerminalLogo",
        "x-sortIndex": 2
      },
      "patch": {
        "description": "Updates the logo that is configured for a specific payment terminal model at the company identified in the path. You can update the logo for only one terminal model at a time.\nThis logo applies to all terminals of the specified model under the company, unless a different logo is configured at a lower level (merchant account, store, or individual terminal). \n* To change the logo, specify the image file as a Base64-encoded string.\n* To restore the logo inherited from the Adyen PSP level, specify an empty logo value.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal settings read and write",
        "operationId": "patch-companies-companyId-terminalLogos",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The terminal model. Possible values: E355, VX675WIFIBT, VX680, VX690, VX700, VX820, M400, MX925, P400Plus, UX300, UX410, V200cPlus, V240mPlus, V400cPlus, V400m, e280, e285, e285p, S1E, S1EL, S1F2, S1L, S1U, S7T.",
            "in": "query",
            "name": "model",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "remove-logo": {
                  "$ref": "#/components/examples/patch-companies-companyId-terminalLogos-remove-logo"
                },
                "upload-logo": {
                  "$ref": "#/components/examples/patch-companies-companyId-terminalLogos-upload-logo"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/Logo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "remove-logo": {
                    "$ref": "#/components/examples/patch-companies-companyId-terminalLogos-remove-logo-200"
                  },
                  "upload-logo": {
                    "$ref": "#/components/examples/patch-companies-companyId-terminalLogos-upload-logo-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Logo"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update the terminal logo",
        "tags": [
          "Terminal settings - company level"
        ],
        "x-methodName": "updateTerminalLogo",
        "x-sortIndex": 4
      }
    },
    "/companies/{companyId}/terminalModels": {
      "get": {
        "description": "Returns a list of payment terminal models that the company identified in the path has access to.\nThe response includes the terminal model ID, which can be used as a query parameter when getting a list of terminals or a list of products for ordering.\n\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal ordering read\n* Management API—Terminal ordering read and write",
        "operationId": "get-companies-companyId-terminalModels",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-companies-companyId-terminalModels-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TerminalModelsResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a list of terminal models",
        "tags": [
          "Terminal orders - company level"
        ],
        "x-methodName": "listTerminalModels",
        "x-sortIndex": 1
      }
    },
    "/companies/{companyId}/terminalOrders": {
      "get": {
        "description": "Returns a lists of terminal products orders for the company identified in the path.\nTo filter the list, use one or more of the query parameters.\n\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal ordering read\n* Management API—Terminal ordering read and write",
        "operationId": "get-companies-companyId-terminalOrders",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Your purchase order number.",
            "in": "query",
            "name": "customerOrderReference",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The order status. Possible values (not case-sensitive): Placed, Confirmed, Cancelled, Shipped, Delivered.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of orders to skip.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The number of orders to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-companies-companyId-terminalOrders-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TerminalOrdersResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a list of orders",
        "tags": [
          "Terminal orders - company level"
        ],
        "x-methodName": "listOrders",
        "x-sortIndex": 7
      },
      "post": {
        "description": "Creates an order for payment terminal products for the company identified in the path.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal ordering read and write\n>Requests to the Management API test endpoint do not create actual orders for test terminals. To order test terminals, you need to [submit a sales order](https://docs.adyen.com/point-of-sale/managing-terminals/order-terminals/#sales-order-steps) in your Customer Area.",
        "operationId": "post-companies-companyId-terminalOrders",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "create-order": {
                  "$ref": "#/components/examples/post-companies-companyId-terminalOrders-create-order"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/TerminalOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "create-order": {
                    "$ref": "#/components/examples/post-companies-companyId-terminalOrders-create-order-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TerminalOrder"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create an order",
        "tags": [
          "Terminal orders - company level"
        ],
        "x-methodName": "createOrder",
        "x-sortIndex": 6
      }
    },
    "/companies/{companyId}/terminalOrders/{orderId}": {
      "get": {
        "description": "Returns the details of the terminal products order identified in the path.\n\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal ordering read\n* Management API—Terminal ordering read and write",
        "operationId": "get-companies-companyId-terminalOrders-orderId",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier of the order.",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-companies-companyId-terminalOrders-orderId-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TerminalOrder"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get an order",
        "tags": [
          "Terminal orders - company level"
        ],
        "x-methodName": "getOrder",
        "x-sortIndex": 8
      },
      "patch": {
        "description": "Updates the terminal products order identified in the path.\nUpdating is only possible while the order has the status **Placed**.\n\nThe request body only needs to contain what you want to change. \nHowever, to update the products in the `items` array, you must provide the entire array. For example, if the array has three items:\n To remove one item, the array must include the remaining two items. Or to add one item, the array must include all four items.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal ordering read and write",
        "operationId": "patch-companies-companyId-terminalOrders-orderId",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier of the order.",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "update-order": {
                  "$ref": "#/components/examples/patch-companies-companyId-terminalOrders-orderId-update-order"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/TerminalOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "update-order": {
                    "$ref": "#/components/examples/patch-companies-companyId-terminalOrders-orderId-update-order-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TerminalOrder"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update an order",
        "tags": [
          "Terminal orders - company level"
        ],
        "x-methodName": "updateOrder",
        "x-sortIndex": 9
      }
    },
    "/companies/{companyId}/terminalOrders/{orderId}/cancel": {
      "post": {
        "description": "Cancels the terminal products order identified in the path.\nCancelling is only possible while the order has the status **Placed**.\nTo cancel an order, make a POST call without a request body. The response returns the full order details, but with the status changed to **Cancelled**.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal ordering read and write",
        "operationId": "post-companies-companyId-terminalOrders-orderId-cancel",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier of the order.",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "cancel-order": {
                    "$ref": "#/components/examples/post-companies-companyId-terminalOrders-orderId-cancel-cancel-order-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TerminalOrder"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Cancel an order",
        "tags": [
          "Terminal orders - company level"
        ],
        "x-methodName": "cancelOrder",
        "x-sortIndex": 10
      }
    },
    "/companies/{companyId}/terminalProducts": {
      "get": {
        "description": "Returns a country-specific list of payment terminal packages and parts that the company identified in the path has access to.\n \nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal ordering read\n* Management API—Terminal ordering read and write",
        "operationId": "get-companies-companyId-terminalProducts",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The country to return products for, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. For example, **US**",
            "in": "query",
            "name": "country",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The terminal model to return products for. Use the ID returned in the [GET `/terminalModels`](https://docs.adyen.com/api-explorer/#/ManagementService/latest/get/companies/{companyId}/terminalModels) response. For example, **Verifone.M400**",
            "in": "query",
            "name": "terminalModelId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of products to skip.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The number of products to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-companies-companyId-terminalProducts-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TerminalProductsResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a list of terminal products",
        "tags": [
          "Terminal orders - company level"
        ],
        "x-methodName": "listTerminalProducts",
        "x-sortIndex": 2
      }
    },
    "/companies/{companyId}/terminalSettings": {
      "get": {
        "description": "Returns the payment terminal settings that are configured for the company identified in the path. These settings apply to all terminals under the company, unless different values are configured at a lower level (merchant account, store, or individual terminal).\n\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal settings read\n* Management API—Terminal settings read and write\n\nFor [sensitive terminal settings](https://docs.adyen.com/point-of-sale/automating-terminal-management/configure-terminals-api#sensitive-terminal-settings), your API credential must have the following role:\n* Management API—Terminal settings Advanced read and write",
        "operationId": "get-companies-companyId-terminalSettings",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-companies-companyId-terminalSettings-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TerminalSettings"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get terminal settings",
        "tags": [
          "Terminal settings - company level"
        ],
        "x-methodName": "getTerminalSettings",
        "x-sortIndex": 1
      },
      "patch": {
        "description": "Updates payment terminal settings for the company identified in the path. These settings apply to all terminals under the company, unless different values are configured at a lower level (merchant account, store, or individual terminal).\n\n* To change a parameter value, include the full object that contains the parameter, even if you don't want to change all parameters in the object.\n* To restore a parameter value inherited from the Adyen PSP level, include the full object that contains the parameter, and specify an empty value for the parameter or omit the parameter.\n* Objects that are not included in the request are not updated.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal settings read and write\n\nFor [sensitive terminal settings](https://docs.adyen.com/point-of-sale/automating-terminal-management/configure-terminals-api#sensitive-terminal-settings), your API credential must have the following role:\n* Management API—Terminal settings Advanced read and write",
        "operationId": "patch-companies-companyId-terminalSettings",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "add-eap-peap-and-psk-wifi-profiles": {
                  "$ref": "#/components/examples/patch-companies-companyId-terminalSettings-add-eap-peap-and-psk-wifi-profiles"
                },
                "add-eap-tls-wifi-profile": {
                  "$ref": "#/components/examples/patch-companies-companyId-terminalSettings-add-eap-tls-wifi-profile"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/TerminalSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "add-eap-peap-and-psk-wifi-profiles": {
                    "$ref": "#/components/examples/patch-companies-companyId-terminalSettings-add-eap-peap-and-psk-wifi-profiles-200"
                  },
                  "add-eap-tls-wifi-profile": {
                    "$ref": "#/components/examples/patch-companies-companyId-terminalSettings-add-eap-tls-wifi-profile-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TerminalSettings"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update terminal settings",
        "tags": [
          "Terminal settings - company level"
        ],
        "x-methodName": "updateTerminalSettings",
        "x-sortIndex": 3
      }
    },
    "/companies/{companyId}/users": {
      "get": {
        "description": "Returns the list of users for the `companyId` identified in the path.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Users read and write\n",
        "operationId": "get-companies-companyId-users",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of the page to return.",
            "in": "query",
            "name": "pageNumber",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The number of items to have on a page. Maximum value is **100**. The default is **10** items on a page.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The partial or complete username to select all users that match.",
            "in": "query",
            "name": "username",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListCompanyUsersResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a list of users",
        "tags": [
          "Users - company level"
        ],
        "x-methodName": "listUsers",
        "x-sortIndex": 0
      },
      "post": {
        "description": "Creates the user for the `companyId` identified in the path.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Users read and write\n",
        "operationId": "post-companies-companyId-users",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "create-user": {
                  "$ref": "#/components/examples/post-companies-companyId-users-create-user"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/CreateCompanyUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "create-user": {
                    "$ref": "#/components/examples/post-companies-companyId-users-create-user-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/CreateCompanyUserResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create a new user",
        "tags": [
          "Users - company level"
        ],
        "x-methodName": "createNewUser",
        "x-sortIndex": 0
      }
    },
    "/companies/{companyId}/users/{userId}": {
      "get": {
        "description": "Returns user details for the `userId` and the `companyId` identified in the path.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Users read and write\n",
        "operationId": "get-companies-companyId-users-userId",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier of the user.",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyUser"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get user details",
        "tags": [
          "Users - company level"
        ],
        "x-methodName": "getUserDetails",
        "x-sortIndex": 0
      },
      "patch": {
        "description": "Updates user details for the `userId` and the `companyId` identified in the path.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Users read and write\n",
        "operationId": "patch-companies-companyId-users-userId",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier of the user.",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompanyUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyUser"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update user details",
        "tags": [
          "Users - company level"
        ],
        "x-methodName": "updateUserDetails",
        "x-sortIndex": 0
      }
    },
    "/companies/{companyId}/webhooks": {
      "get": {
        "description": "Lists all webhook configurations for the company account.\n\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Webhooks read\n* Management API—Webhooks read and write",
        "operationId": "get-companies-companyId-webhooks",
        "parameters": [
          {
            "description": "Unique identifier of the [company account](https://docs.adyen.com/account/account-structure#company-account).",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of the page to fetch.",
            "in": "query",
            "name": "pageNumber",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The number of items to have on a page, maximum 100. The default is 10 items on a page.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "get-company-webhooks": {
                    "$ref": "#/components/examples/get-companies-companyId-webhooks-get-company-webhooks-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ListWebhooksResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "List all webhooks",
        "tags": [
          "Webhooks - company level"
        ],
        "x-methodName": "listAllWebhooks",
        "x-sortIndex": 2
      },
      "post": {
        "description": "Subscribe to receive webhook notifications about events related to your company account. You can add basic authentication to make sure the data is secure.\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Webhooks read and write",
        "operationId": "post-companies-companyId-webhooks",
        "parameters": [
          {
            "description": "Unique identifier of the [company account](https://docs.adyen.com/account/account-structure#company-account).",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "post-company-webhook": {
                  "$ref": "#/components/examples/post-companies-companyId-webhooks-post-company-webhook"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/CreateCompanyWebhookRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "post-company-webhook": {
                    "$ref": "#/components/examples/post-companies-companyId-webhooks-post-company-webhook-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Set up a webhook",
        "tags": [
          "Webhooks - company level"
        ],
        "x-methodName": "setUpWebhook",
        "x-sortIndex": 1
      }
    },
    "/companies/{companyId}/webhooks/{webhookId}": {
      "delete": {
        "description": "Remove the configuration for the webhook identified in the path.\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Webhooks read and write",
        "operationId": "delete-companies-companyId-webhooks-webhookId",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the webhook configuration.",
            "in": "path",
            "name": "webhookId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - look at the actual response code for the status of the request. "
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Remove a webhook",
        "tags": [
          "Webhooks - company level"
        ],
        "x-methodName": "removeWebhook",
        "x-sortIndex": 5
      },
      "get": {
        "description": "Returns the configuration for the webhook identified in the path.\n\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Webhooks read\n* Management API—Webhooks read and write",
        "operationId": "get-companies-companyId-webhooks-webhookId",
        "parameters": [
          {
            "description": "Unique identifier of the [company account](https://docs.adyen.com/account/account-structure#company-account).",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the webhook configuration.",
            "in": "path",
            "name": "webhookId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "get-company-webhook": {
                    "$ref": "#/components/examples/get-companies-companyId-webhooks-webhookId-get-company-webhook-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a webhook",
        "tags": [
          "Webhooks - company level"
        ],
        "x-methodName": "getWebhook",
        "x-sortIndex": 3
      },
      "patch": {
        "description": "Make changes to the configuration of the webhook identified in the path. The request contains the new values you want to have in the webhook configuration. The response contains the full configuration for the webhook, which includes the new values from the request.\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Webhooks read and write",
        "operationId": "patch-companies-companyId-webhooks-webhookId",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the webhook configuration.",
            "in": "path",
            "name": "webhookId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "patch-company-webhook": {
                  "$ref": "#/components/examples/patch-companies-companyId-webhooks-webhookId-patch-company-webhook"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateCompanyWebhookRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "patch-company-webhook": {
                    "$ref": "#/components/examples/patch-companies-companyId-webhooks-webhookId-patch-company-webhook-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update a webhook",
        "tags": [
          "Webhooks - company level"
        ],
        "x-methodName": "updateWebhook",
        "x-sortIndex": 4
      }
    },
    "/companies/{companyId}/webhooks/{webhookId}/generateHmac": {
      "post": {
        "description": "Returns an [HMAC key](https://en.wikipedia.org/wiki/HMAC) for the webhook identified in the path. This key allows you to check the integrity and the origin of the notifications you receive.By creating an HMAC key, you start receiving [HMAC-signed notifications](https://docs.adyen.com/development-resources/webhooks/verify-hmac-signatures#enable-hmac-signatures) from Adyen. Find out more about how to [verify HMAC signatures](https://docs.adyen.com/development-resources/webhooks/verify-hmac-signatures).\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Webhooks read and write",
        "operationId": "post-companies-companyId-webhooks-webhookId-generateHmac",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the webhook configuration.",
            "in": "path",
            "name": "webhookId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "post-company-webhook-generateHmac": {
                    "$ref": "#/components/examples/post-companies-companyId-webhooks-webhookId-generateHmac-post-company-webhook-generateHmac-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/GenerateHmacKeyResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Generate an HMAC key",
        "tags": [
          "Webhooks - company level"
        ],
        "x-methodName": "generateHmacKey",
        "x-sortIndex": 6
      }
    },
    "/companies/{companyId}/webhooks/{webhookId}/test": {
      "post": {
        "description": "Sends sample notifications to test if the webhook is set up correctly.\n\nWe send sample notifications for maximum 20 of the merchant accounts that the webhook is configured for. If the webhook is configured for more than 20 merchant accounts, use the `merchantIds` array to specify a subset of the merchant accounts for which to send test notifications.\n\nWe send four test notifications for each event code you choose. They cover success and failure scenarios for the hard-coded currencies EUR and GBP, regardless of the currencies configured in the merchant accounts. For custom notifications, we only send the specified custom notification.\n\nThe response describes the result of the test. The `status` field tells you if the test was successful or not. You can use the other response fields to troubleshoot unsuccessful tests.\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Webhooks read and write",
        "operationId": "post-companies-companyId-webhooks-webhookId-test",
        "parameters": [
          {
            "description": "The unique identifier of the company account.",
            "in": "path",
            "name": "companyId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the webhook configuration.",
            "in": "path",
            "name": "webhookId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "post-company-webhook-test": {
                  "$ref": "#/components/examples/post-companies-companyId-webhooks-webhookId-test-post-company-webhook-test"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/TestCompanyWebhookRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "post-company-webhook-test": {
                    "$ref": "#/components/examples/post-companies-companyId-webhooks-webhookId-test-post-company-webhook-test-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TestWebhookResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Test a webhook",
        "tags": [
          "Webhooks - company level"
        ],
        "x-methodName": "testWebhook",
        "x-sortIndex": 7
      }
    },
    "/me": {
      "get": {
        "description": "Returns your [API credential](https://docs.adyen.com/development-resources/api-credentials) details based on the API Key you used in the request.\n\nYou can make this request with any of the Management API roles.",
        "operationId": "get-me",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MeApiCredential"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get API credential details",
        "tags": [
          "My API credential"
        ],
        "x-methodName": "getApiCredentialDetails",
        "x-sortIndex": 0
      }
    },
    "/me/allowedOrigins": {
      "get": {
        "description": "Returns the list of [allowed origins](https://docs.adyen.com/development-resources/client-side-authentication#allowed-origins) of your [API credential](https://docs.adyen.com/development-resources/api-credentials) based on the API key you used in the request.\n\nYou can make this request with any of the Management API roles.",
        "operationId": "get-me-allowedOrigins",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllowedOriginsResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get allowed origins",
        "tags": [
          "My API credential"
        ],
        "x-methodName": "getAllowedOrigins",
        "x-sortIndex": 0
      },
      "post": {
        "description": "Adds an allowed origin to the list of [allowed origins](https://docs.adyen.com/development-resources/client-side-authentication#allowed-origins) of your API credential.\nThe API key from the request is used to identify the [API credential](https://docs.adyen.com/development-resources/api-credentials).\n\nYou can make this request with any of the Management API roles.",
        "operationId": "post-me-allowedOrigins",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAllowedOriginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllowedOrigin"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Add allowed origin",
        "tags": [
          "My API credential"
        ],
        "x-methodName": "addAllowedOrigin",
        "x-sortIndex": 0
      }
    },
    "/me/allowedOrigins/{originId}": {
      "delete": {
        "description": "Removes the [allowed origin](https://docs.adyen.com/development-resources/client-side-authentication#allowed-origins) specified in the path.\nThe API key from the request is used to identify the [API credential](https://docs.adyen.com/development-resources/api-credentials).\n\nYou can make this request with any of the Management API roles.",
        "operationId": "delete-me-allowedOrigins-originId",
        "parameters": [
          {
            "description": "Unique identifier of the allowed origin.",
            "in": "path",
            "name": "originId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - look at the actual response code for the status of the request. "
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Remove allowed origin",
        "tags": [
          "My API credential"
        ],
        "x-methodName": "removeAllowedOrigin",
        "x-sortIndex": 0
      },
      "get": {
        "description": "Returns the details of the [allowed origin](https://docs.adyen.com/development-resources/client-side-authentication#allowed-origins) specified in the path.\nThe API key from the request is used to identify the [API credential](https://docs.adyen.com/development-resources/api-credentials).\n\nYou can make this request with any of the Management API roles.",
        "operationId": "get-me-allowedOrigins-originId",
        "parameters": [
          {
            "description": "Unique identifier of the allowed origin.",
            "in": "path",
            "name": "originId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllowedOrigin"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get allowed origin details",
        "tags": [
          "My API credential"
        ],
        "x-methodName": "getAllowedOriginDetails",
        "x-sortIndex": 0
      }
    },
    "/me/generateClientKey": {
      "post": {
        "description": "Generates a new [client key](https://docs.adyen.com/development-resources/client-side-authentication/) used to authenticate requests from your payment environment.\nYou can use the new client key a few minutes after generating it.\nThe old client key stops working 24 hours after generating a new one.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—API credentials read and write",
        "operationId": "post-me-generateClientKey",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateClientKeyResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Generate a client key",
        "tags": [
          "My API credential"
        ],
        "x-methodName": "generateClientKey",
        "x-sortIndex": 0
      }
    },
    "/merchants": {
      "get": {
        "description": "Returns the list of merchant accounts that your API credential has access to. The list is grouped into pages as defined by the query parameters. \n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Account read",
        "operationId": "get-merchants",
        "parameters": [
          {
            "description": "The number of the page to fetch.",
            "in": "query",
            "name": "pageNumber",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The number of items to have on a page, maximum 100. The default is 10 items on a page.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-merchants-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ListMerchantResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a list of merchant accounts",
        "tags": [
          "Account - merchant level"
        ],
        "x-methodName": "listMerchantAccounts",
        "x-sortIndex": 4
      },
      "post": {
        "description": "Creates a merchant account for the company account specified in the request.\n\nUse this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Accounts read and write",
        "operationId": "post-merchants",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "post-merchants": {
                  "$ref": "#/components/examples/post-merchants-post-merchants"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/CreateMerchantRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "post-merchants": {
                    "$ref": "#/components/examples/post-merchants-post-merchants-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/CreateMerchantResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create a merchant account",
        "tags": [
          "Account - merchant level"
        ],
        "x-methodName": "createMerchantAccount",
        "x-sortIndex": 1
      }
    },
    "/merchants/{merchantId}": {
      "get": {
        "description": "Returns the merchant account specified in the path. Your API credential must have access to the merchant account.\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Account read",
        "operationId": "get-merchants-merchantId",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-merchants-merchantId-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Merchant"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a merchant account",
        "tags": [
          "Account - merchant level"
        ],
        "x-methodName": "getMerchantAccount",
        "x-sortIndex": 3
      }
    },
    "/merchants/{merchantId}/activate": {
      "post": {
        "description": "Sends a request to activate the merchant account identified in the path.\n\nYou get the result of the activation asynchronously through a [`merchant.updated`](https://docs.adyen.com/api-explorer/ManagementNotification/latest/post/merchant.updated) webhook. Once the merchant account is activated, you can start using it to accept payments and payouts.\n\nUse this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Accounts read and write",
        "operationId": "post-merchants-merchantId-activate",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestActivationResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Request to activate a merchant account",
        "tags": [
          "Account - merchant level"
        ],
        "x-methodName": "requestToActivateMerchantAccount",
        "x-sortIndex": 2
      }
    },
    "/merchants/{merchantId}/apiCredentials": {
      "get": {
        "description": "Returns the list of [API credentials](https://docs.adyen.com/development-resources/api-credentials) for the merchant account. The list is grouped into pages as defined by the query parameters.\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—API credentials read and write",
        "operationId": "get-merchants-merchantId-apiCredentials",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of the page to fetch.",
            "in": "query",
            "name": "pageNumber",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The number of items to have on a page, maximum 100. The default is 10 items on a page.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-merchants-merchantId-apiCredentials-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ListMerchantApiCredentialsResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a list of API credentials",
        "tags": [
          "API credentials - merchant level"
        ],
        "x-methodName": "listApiCredentials",
        "x-sortIndex": 0
      },
      "post": {
        "description": "Creates an [API credential](https://docs.adyen.com/development-resources/api-credentials) for the company account identified in the path. In the request, you can specify the roles and allowed origins for the new API credential.\n\nThe response includes the:\n* [API key](https://docs.adyen.com/development-resources/api-authentication#api-key-authentication): used for API request authentication.\n* [Client key](https://docs.adyen.com/development-resources/client-side-authentication#how-it-works): public key used for client-side authentication.\n* [Username and password](https://docs.adyen.com/development-resources/api-authentication#using-basic-authentication): used for basic authentication.\n\n> Make sure you store the API key securely in your system. You won't be able to retrieve it later.\n\nIf your API key is lost or compromised, you need to [generate a new API key](https://docs.adyen.com/api-explorer/#/ManagementService/v1/post/merchants/{merchantId}/apiCredentials/{apiCredentialId}/generateApiKey).\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—API credentials read and write",
        "operationId": "post-merchants-merchantId-apiCredentials",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "post-merchant-credential": {
                  "$ref": "#/components/examples/post-merchants-merchantId-apiCredentials-post-merchant-credential"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/CreateMerchantApiCredentialRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "post-merchant-credential": {
                    "$ref": "#/components/examples/post-merchants-merchantId-apiCredentials-post-merchant-credential-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/CreateApiCredentialResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create an API credential",
        "tags": [
          "API credentials - merchant level"
        ],
        "x-methodName": "createApiCredential",
        "x-sortIndex": 0
      }
    },
    "/merchants/{merchantId}/apiCredentials/{apiCredentialId}": {
      "get": {
        "description": "Returns the [API credential](https://docs.adyen.com/development-resources/api-credentials) identified in the path.\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—API credentials read and write",
        "operationId": "get-merchants-merchantId-apiCredentials-apiCredentialId",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the API credential.",
            "in": "path",
            "name": "apiCredentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-merchants-merchantId-apiCredentials-apiCredentialId-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiCredential"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get an API credential",
        "tags": [
          "API credentials - merchant level"
        ],
        "x-methodName": "getApiCredential",
        "x-sortIndex": 0
      },
      "patch": {
        "description": "Changes the API credential's roles, or allowed origins. The request has the new values for the fields you want to change. The response contains the full updated API credential, including the new values from the request. \n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—API credentials read and write",
        "operationId": "patch-merchants-merchantId-apiCredentials-apiCredentialId",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the API credential.",
            "in": "path",
            "name": "apiCredentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "patch-merchant-credential": {
                  "$ref": "#/components/examples/patch-merchants-merchantId-apiCredentials-apiCredentialId-patch-merchant-credential"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateMerchantApiCredentialRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "patch-merchant-credential": {
                    "$ref": "#/components/examples/patch-merchants-merchantId-apiCredentials-apiCredentialId-patch-merchant-credential-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiCredential"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update an API credential",
        "tags": [
          "API credentials - merchant level"
        ],
        "x-methodName": "updateApiCredential",
        "x-sortIndex": 0
      }
    },
    "/merchants/{merchantId}/apiCredentials/{apiCredentialId}/allowedOrigins": {
      "get": {
        "description": "Returns the list of [allowed origins](https://docs.adyen.com/development-resources/client-side-authentication#allowed-origins) for the API credential identified in the path.\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—API credentials read and write",
        "operationId": "get-merchants-merchantId-apiCredentials-apiCredentialId-allowedOrigins",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the API credential.",
            "in": "path",
            "name": "apiCredentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "get-allowed-origin": {
                    "$ref": "#/components/examples/get-merchants-merchantId-apiCredentials-apiCredentialId-allowedOrigins-get-allowed-origin-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AllowedOriginsResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a list of allowed origins",
        "tags": [
          "Allowed origins - merchant level"
        ],
        "x-methodName": "listAllowedOrigins",
        "x-sortIndex": 0
      },
      "post": {
        "description": "Adds a new [allowed origin](https://docs.adyen.com/development-resources/client-side-authentication#allowed-origins) to the API credential's list of allowed origins.\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—API credentials read and write",
        "operationId": "post-merchants-merchantId-apiCredentials-apiCredentialId-allowedOrigins",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the API credential.",
            "in": "path",
            "name": "apiCredentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "add-allowed-origin": {
                  "$ref": "#/components/examples/post-merchants-merchantId-apiCredentials-apiCredentialId-allowedOrigins-add-allowed-origin"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/AllowedOrigin"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "add-allowed-origin": {
                    "$ref": "#/components/examples/post-merchants-merchantId-apiCredentials-apiCredentialId-allowedOrigins-add-allowed-origin-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AllowedOriginsResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create an allowed origin",
        "tags": [
          "Allowed origins - merchant level"
        ],
        "x-methodName": "createAllowedOrigin",
        "x-sortIndex": 0
      }
    },
    "/merchants/{merchantId}/apiCredentials/{apiCredentialId}/allowedOrigins/{originId}": {
      "delete": {
        "description": "Removes the [allowed origin](https://docs.adyen.com/development-resources/client-side-authentication#allowed-origins) identified in the path. As soon as an allowed origin is removed, we no longer accept client-side requests from that domain.\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—API credentials read and write",
        "operationId": "delete-merchants-merchantId-apiCredentials-apiCredentialId-allowedOrigins-originId",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the API credential.",
            "in": "path",
            "name": "apiCredentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the allowed origin.",
            "in": "path",
            "name": "originId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - look at the actual response code for the status of the request. "
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Delete an allowed origin",
        "tags": [
          "Allowed origins - merchant level"
        ],
        "x-methodName": "deleteAllowedOrigin",
        "x-sortIndex": 0
      },
      "get": {
        "description": "Returns the [allowed origin](https://docs.adyen.com/development-resources/client-side-authentication#allowed-origins) identified in the path.\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—API credentials read and write",
        "operationId": "get-merchants-merchantId-apiCredentials-apiCredentialId-allowedOrigins-originId",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the API credential.",
            "in": "path",
            "name": "apiCredentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the allowed origin.",
            "in": "path",
            "name": "originId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "get-allowed-origins": {
                    "$ref": "#/components/examples/get-merchants-merchantId-apiCredentials-apiCredentialId-allowedOrigins-originId-get-allowed-origins-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AllowedOrigin"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get an allowed origin",
        "tags": [
          "Allowed origins - merchant level"
        ],
        "x-methodName": "getAllowedOrigin",
        "x-sortIndex": 0
      }
    },
    "/merchants/{merchantId}/apiCredentials/{apiCredentialId}/generateApiKey": {
      "post": {
        "description": "Returns a new API key for the API credential. You can use the new API key a few minutes after generating it. The old API key stops working 24 hours after generating a new one.\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—API credentials read and write",
        "operationId": "post-merchants-merchantId-apiCredentials-apiCredentialId-generateApiKey",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the API credential.",
            "in": "path",
            "name": "apiCredentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateApiKeyResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Generate new API key",
        "tags": [
          "API key - merchant level"
        ],
        "x-methodName": "generateNewApiKey",
        "x-sortIndex": 0
      }
    },
    "/merchants/{merchantId}/apiCredentials/{apiCredentialId}/generateClientKey": {
      "post": {
        "description": "Returns a new [client key](https://docs.adyen.com/development-resources/client-side-authentication#how-it-works) for the API credential identified in the path. You can use the new client key a few minutes after generating it. The old client key stops working 24 hours after generating a new one.\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—API credentials read and write",
        "operationId": "post-merchants-merchantId-apiCredentials-apiCredentialId-generateClientKey",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the API credential.",
            "in": "path",
            "name": "apiCredentialId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GenerateClientKeyResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Generate new client key",
        "tags": [
          "Client key - merchant level"
        ],
        "x-methodName": "generateNewClientKey",
        "x-sortIndex": 0
      }
    },
    "/merchants/{merchantId}/billingEntities": {
      "get": {
        "description": "Returns the billing entities of the merchant account identified in the path.\nA billing entity is a legal entity where we charge orders to. An order for terminal products must contain the ID of a billing entity.\n\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal ordering read\n* Management API—Terminal ordering read and write",
        "operationId": "get-merchants-merchantId-billingEntities",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the billing entity.",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-merchants-merchantId-billingEntities-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/BillingEntitiesResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a list of billing entities",
        "tags": [
          "Terminal orders - merchant level"
        ],
        "x-methodName": "listBillingEntities",
        "x-sortIndex": 3
      }
    },
    "/merchants/{merchantId}/paymentMethodSettings": {
      "get": {
        "description": "Returns details for all payment methods of the merchant account identified in the path.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Payment methods read\n",
        "operationId": "get-merchants-merchantId-paymentMethodSettings",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier of the store for which to return the payment methods.",
            "in": "query",
            "name": "storeId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier of the Business Line for which to return the payment methods.",
            "in": "query",
            "name": "businessLineId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of items to have on a page, maximum 100. The default is 10 items on a page.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The number of the page to fetch.",
            "in": "query",
            "name": "pageNumber",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethodResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get all payment methods",
        "tags": [
          "Payment methods - merchant level"
        ],
        "x-methodName": "getAllPaymentMethods",
        "x-sortIndex": 2
      },
      "post": {
        "description": "Sends a request to add a new payment method to the merchant account identified in the path.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Payment methods read and write\n",
        "operationId": "post-merchants-merchantId-paymentMethodSettings",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "add-payment-method": {
                  "$ref": "#/components/examples/post-merchants-merchantId-paymentMethodSettings-add-payment-method"
                },
                "add-payment-method-partner-model": {
                  "$ref": "#/components/examples/post-merchants-merchantId-paymentMethodSettings-add-payment-method-partner-model"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/PaymentMethodSetupInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "add-payment-method": {
                    "$ref": "#/components/examples/post-merchants-merchantId-paymentMethodSettings-add-payment-method-200"
                  },
                  "add-payment-method-partner-model": {
                    "$ref": "#/components/examples/post-merchants-merchantId-paymentMethodSettings-add-payment-method-partner-model-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethod"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Request a payment method",
        "tags": [
          "Payment methods - merchant level"
        ],
        "x-methodName": "requestPaymentMethod",
        "x-sortIndex": 1
      }
    },
    "/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}": {
      "get": {
        "description": "Returns details for the merchant account and the payment method identified in the path.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Payment methods read\n",
        "operationId": "get-merchants-merchantId-paymentMethodSettings-paymentMethodId",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier of the payment method.",
            "in": "path",
            "name": "paymentMethodId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethod"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get payment method details",
        "tags": [
          "Payment methods - merchant level"
        ],
        "x-methodName": "getPaymentMethodDetails",
        "x-sortIndex": 3
      },
      "patch": {
        "description": "Updates payment method details for the merchant account and the payment method identified in the path.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Payment methods read and write\n",
        "operationId": "patch-merchants-merchantId-paymentMethodSettings-paymentMethodId",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier of the payment method.",
            "in": "path",
            "name": "paymentMethodId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePaymentMethodInfo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentMethod"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update a payment method",
        "tags": [
          "Payment methods - merchant level"
        ],
        "x-methodName": "updatePaymentMethod",
        "x-sortIndex": 4
      }
    },
    "/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}/addApplePayDomains": {
      "post": {
        "description": "Adds the new domain to the list of Apple Pay domains that are registered with the merchant account and the payment method identified in the path. For more information, see [Apple Pay documentation](https://docs.adyen.com/payment-methods/apple-pay/enable-apple-pay#register-merchant-domain).\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Payment methods read and write\n",
        "operationId": "post-merchants-merchantId-paymentMethodSettings-paymentMethodId-addApplePayDomains",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier of the payment method.",
            "in": "path",
            "name": "paymentMethodId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "add-applepay-domain": {
                  "$ref": "#/components/examples/post-merchants-merchantId-paymentMethodSettings-paymentMethodId-addApplePayDomains-add-applepay-domain"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/ApplePayInfo"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content - look at the actual response code for the status of the request. "
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "429": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": ""
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Add an Apple Pay domain",
        "tags": [
          "Payment methods - merchant level"
        ],
        "x-methodName": "addApplePayDomain",
        "x-sortIndex": 5
      }
    },
    "/merchants/{merchantId}/paymentMethodSettings/{paymentMethodId}/getApplePayDomains": {
      "get": {
        "description": "Returns all Apple Pay domains that are registered with the merchant account and the payment method identified in the path. For more information, see [Apple Pay documentation](https://docs.adyen.com/payment-methods/apple-pay/enable-apple-pay#register-merchant-domain).\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Payment methods read\n",
        "operationId": "get-merchants-merchantId-paymentMethodSettings-paymentMethodId-getApplePayDomains",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier of the payment method.",
            "in": "path",
            "name": "paymentMethodId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplePayInfo"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get Apple Pay domains",
        "tags": [
          "Payment methods - merchant level"
        ],
        "x-methodName": "getApplePayDomains",
        "x-sortIndex": 6
      }
    },
    "/merchants/{merchantId}/payoutSettings": {
      "get": {
        "description": "Returns the list of payout settings for the merchant account identified in the path.\n\nUse this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Payout account settings read",
        "operationId": "get-merchants-merchantId-payoutSettings",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayoutSettingsResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a list of payout settings",
        "tags": [
          "Payout settings - merchant level"
        ],
        "x-methodName": "listPayoutSettings",
        "x-sortIndex": 3
      },
      "post": {
        "description": "Sends a request to add a payout setting for the merchant account specified in the path. A payout setting links the merchant account to the [transfer instrument](https://docs.adyen.com/api-explorer/#/legalentity/latest/post/transferInstruments) that contains the details of the payout bank account. Adyen verifies the bank account before allowing and enabling the payout setting.\n\nIf you're accepting payments in multiple currencies, you may add multiple payout settings for the merchant account.\n\nUse this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n\n* Management API—Payout account settings read and write",
        "operationId": "post-merchants-merchantId-payoutSettings",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PayoutSettingsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayoutSettings"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Add a payout setting",
        "tags": [
          "Payout settings - merchant level"
        ],
        "x-methodName": "addPayoutSetting",
        "x-sortIndex": 1
      }
    },
    "/merchants/{merchantId}/payoutSettings/{payoutSettingsId}": {
      "delete": {
        "description": "Deletes the payout setting identified in the path.\n\nUse this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n\n* Management API—Payout account settings read and write",
        "operationId": "delete-merchants-merchantId-payoutSettings-payoutSettingsId",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier of the payout setting.",
            "in": "path",
            "name": "payoutSettingsId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - look at the actual response code for the status of the request. "
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Delete a payout setting",
        "tags": [
          "Payout settings - merchant level"
        ],
        "x-methodName": "deletePayoutSetting",
        "x-sortIndex": 5
      },
      "get": {
        "description": "Returns the payout setting identified in the path.\n\nUse this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Payout account settings read",
        "operationId": "get-merchants-merchantId-payoutSettings-payoutSettingsId",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier of the payout setting.",
            "in": "path",
            "name": "payoutSettingsId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayoutSettings"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a payout setting",
        "tags": [
          "Payout settings - merchant level"
        ],
        "x-methodName": "getPayoutSetting",
        "x-sortIndex": 4
      },
      "patch": {
        "description": "Updates the payout setting identified in the path. You can enable or disable the payout setting.\n\nUse this endpoint if your integration requires it, such as Adyen for Platforms Manage. Your Adyen contact will set up your access.\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n\n* Management API—Payout account settings read and write",
        "operationId": "patch-merchants-merchantId-payoutSettings-payoutSettingsId",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier of the payout setting.",
            "in": "path",
            "name": "payoutSettingsId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePayoutSettingsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PayoutSettings"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update a payout setting",
        "tags": [
          "Payout settings - merchant level"
        ],
        "x-methodName": "updatePayoutSetting",
        "x-sortIndex": 2
      }
    },
    "/merchants/{merchantId}/shippingLocations": {
      "get": {
        "description": "Returns the shipping locations for the merchant account identified in the path.\nA shipping location includes the address where orders can be delivered, and an ID which you need to specify when ordering terminal products.\n\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal ordering read\n* Management API—Terminal ordering read and write",
        "operationId": "get-merchants-merchantId-shippingLocations",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The name of the shipping location.",
            "in": "query",
            "name": "name",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of locations to skip.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The number of locations to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-merchants-merchantId-shippingLocations-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ShippingLocationsResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a list of shipping locations",
        "tags": [
          "Terminal orders - merchant level"
        ],
        "x-methodName": "listShippingLocations",
        "x-sortIndex": 4
      },
      "post": {
        "description": "Creates a shipping location for the merchant account identified in the path. A shipping location defines an address where orders can be shipped to. \n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal ordering read and write",
        "operationId": "post-merchants-merchantId-shippingLocations",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "create-shipping-location": {
                  "$ref": "#/components/examples/post-merchants-merchantId-shippingLocations-create-shipping-location"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/ShippingLocation"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "create-shipping-location": {
                    "$ref": "#/components/examples/post-merchants-merchantId-shippingLocations-create-shipping-location-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ShippingLocation"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create a shipping location",
        "tags": [
          "Terminal orders - merchant level"
        ],
        "x-methodName": "createShippingLocation",
        "x-sortIndex": 5
      }
    },
    "/merchants/{merchantId}/splitConfigurations": {
      "get": {
        "description": "Returns the list of split configurations for the merchant account.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API - SplitConfiguration read and write",
        "operationId": "get-merchants-merchantId-splitConfigurations",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-merchants-merchantId-splitConfigurations-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/SplitConfigurationList"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a list of split configurations",
        "tags": [
          "Split configuration - merchant level"
        ],
        "x-methodName": "listSplitConfigurations",
        "x-sortIndex": 3
      },
      "post": {
        "description": "Creates a split configuration for the merchant account specified in the path.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API - SplitConfiguration read and write",
        "operationId": "post-merchants-merchantId-splitConfigurations",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "post-splitConfiguration": {
                  "$ref": "#/components/examples/post-merchants-merchantId-splitConfigurations-post-splitConfiguration"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/SplitConfiguration"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "post-splitConfiguration": {
                    "$ref": "#/components/examples/post-merchants-merchantId-splitConfigurations-post-splitConfiguration-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/SplitConfiguration"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create a split configuration",
        "tags": [
          "Split configuration - merchant level"
        ],
        "x-methodName": "createSplitConfiguration",
        "x-sortIndex": 1
      }
    },
    "/merchants/{merchantId}/splitConfigurations/{splitConfigurationId}": {
      "delete": {
        "description": "Deletes the split configuration specified in the path.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API - SplitConfiguration read and write",
        "operationId": "delete-merchants-merchantId-splitConfigurations-splitConfigurationId",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier of the split configuration.",
            "in": "path",
            "name": "splitConfigurationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SplitConfiguration"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Delete a split configuration",
        "tags": [
          "Split configuration - merchant level"
        ],
        "x-methodName": "deleteSplitConfiguration",
        "x-sortIndex": 8
      },
      "get": {
        "description": "Returns the split configuration specified in the path.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API - SplitConfiguration read and write",
        "operationId": "get-merchants-merchantId-splitConfigurations-splitConfigurationId",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier of the split configuration.",
            "in": "path",
            "name": "splitConfigurationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-merchants-merchantId-splitConfigurations-splitConfigurationId-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/SplitConfiguration"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a split configuration",
        "tags": [
          "Split configuration - merchant level"
        ],
        "x-methodName": "getSplitConfiguration",
        "x-sortIndex": 4
      },
      "patch": {
        "description": "Changes the description of the split configuration specified in the path.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API - SplitConfiguration read and write",
        "operationId": "patch-merchants-merchantId-splitConfigurations-splitConfigurationId",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier of the split configuration.",
            "in": "path",
            "name": "splitConfigurationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "patch-splitConfiguration-description": {
                  "$ref": "#/components/examples/patch-merchants-merchantId-splitConfigurations-splitConfigurationId-patch-splitConfiguration-description"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateSplitConfigurationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "patch-splitConfiguration-description": {
                    "$ref": "#/components/examples/patch-merchants-merchantId-splitConfigurations-splitConfigurationId-patch-splitConfiguration-description-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/SplitConfiguration"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update split configuration description",
        "tags": [
          "Split configuration - merchant level"
        ],
        "x-methodName": "updateSplitConfigurationDescription",
        "x-sortIndex": 5
      },
      "post": {
        "description": "Creates a rule in the split configuration specified in the path.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API - SplitConfiguration read and write",
        "operationId": "post-merchants-merchantId-splitConfigurations-splitConfigurationId",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier of the split configuration.",
            "in": "path",
            "name": "splitConfigurationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "post-splitConfiguration-rule": {
                  "$ref": "#/components/examples/post-merchants-merchantId-splitConfigurations-splitConfigurationId-post-splitConfiguration-rule"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/SplitConfigurationRule"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "post-splitConfiguration-rule": {
                    "$ref": "#/components/examples/post-merchants-merchantId-splitConfigurations-splitConfigurationId-post-splitConfiguration-rule-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/SplitConfiguration"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create a rule",
        "tags": [
          "Split configuration - merchant level"
        ],
        "x-methodName": "createRule",
        "x-sortIndex": 2
      }
    },
    "/merchants/{merchantId}/splitConfigurations/{splitConfigurationId}/rules/{ruleId}": {
      "delete": {
        "description": "Deletes the split configuration rule specified in the path.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API - SplitConfiguration read and write",
        "operationId": "delete-merchants-merchantId-splitConfigurations-splitConfigurationId-rules-ruleId",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier of the split configuration.",
            "in": "path",
            "name": "splitConfigurationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "ruleId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SplitConfiguration"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Delete a split configuration rule",
        "tags": [
          "Split configuration - merchant level"
        ],
        "x-methodName": "deleteSplitConfigurationRule",
        "x-sortIndex": 9
      },
      "patch": {
        "description": "Changes the conditions of the split configuration rule specified in the path.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API - SplitConfiguration read and write",
        "operationId": "patch-merchants-merchantId-splitConfigurations-splitConfigurationId-rules-ruleId",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The identifier of the split configuration.",
            "in": "path",
            "name": "splitConfigurationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier of the split configuration rule.",
            "in": "path",
            "name": "ruleId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "patch-splitConfiguration-rule": {
                  "$ref": "#/components/examples/patch-merchants-merchantId-splitConfigurations-splitConfigurationId-rules-ruleId-patch-splitConfiguration-rule"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateSplitConfigurationRuleRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "patch-splitConfiguration-rule": {
                    "$ref": "#/components/examples/patch-merchants-merchantId-splitConfigurations-splitConfigurationId-rules-ruleId-patch-splitConfiguration-rule-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/SplitConfiguration"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update split conditions",
        "tags": [
          "Split configuration - merchant level"
        ],
        "x-methodName": "updateSplitConditions",
        "x-sortIndex": 6
      }
    },
    "/merchants/{merchantId}/splitConfigurations/{splitConfigurationId}/rules/{ruleId}/splitLogic/{splitLogicId}": {
      "patch": {
        "description": "Changes the split logic specified in the path.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API - SplitConfiguration read and write",
        "operationId": "patch-merchants-merchantId-splitConfigurations-splitConfigurationId-rules-ruleId-splitLogic-splitLogicId",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier of the split configuration.",
            "in": "path",
            "name": "splitConfigurationId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier of the split configuration rule.",
            "in": "path",
            "name": "ruleId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier of the split configuration split.",
            "in": "path",
            "name": "splitLogicId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "patch-splitConfiguration-rule-splitLogic": {
                  "$ref": "#/components/examples/patch-merchants-merchantId-splitConfigurations-splitConfigurationId-rules-ruleId-splitLogic-splitLogicId-patch-splitConfiguration-rule-splitLogic"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateSplitConfigurationLogicRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "patch-splitConfiguration-rule-splitLogic": {
                    "$ref": "#/components/examples/patch-merchants-merchantId-splitConfigurations-splitConfigurationId-rules-ruleId-splitLogic-splitLogicId-patch-splitConfiguration-rule-splitLogic-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/SplitConfiguration"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update the split logic",
        "tags": [
          "Split configuration - merchant level"
        ],
        "x-methodName": "updateSplitLogic",
        "x-sortIndex": 7
      }
    },
    "/merchants/{merchantId}/stores": {
      "get": {
        "description": "Returns a list of stores for the merchant account identified in the path. The list is grouped into pages as defined by the query parameters.\n\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Stores read\n* Management API—Stores read and write",
        "operationId": "get-merchants-merchantId-stores",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of the page to fetch.",
            "in": "query",
            "name": "pageNumber",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The number of items to have on a page, maximum 100. The default is 10 items on a page.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The reference of the store.",
            "in": "query",
            "name": "reference",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-merchants-merchantId-stores-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ListStoresResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a list of stores",
        "tags": [
          "Account - store level"
        ],
        "x-methodName": "listStoresByMerchantId",
        "x-sortIndex": 1
      },
      "post": {
        "description": "Creates a store for the merchant account identified in the path.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Stores read and write",
        "operationId": "post-merchants-merchantId-stores",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "post-stores": {
                  "$ref": "#/components/examples/post-merchants-merchantId-stores-post-stores"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/StoreCreationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "post-stores": {
                    "$ref": "#/components/examples/post-merchants-merchantId-stores-post-stores-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Store"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create a store",
        "tags": [
          "Account - store level"
        ],
        "x-methodName": "createStoreByMerchantId",
        "x-sortIndex": 0
      }
    },
    "/merchants/{merchantId}/stores/{reference}/terminalLogos": {
      "get": {
        "description": "Returns the logo that is configured for a specific payment terminal model at the store identified in the path. \nThe logo is returned as a Base64-encoded string. You need to Base64-decode the string to get the actual image file. \nThis logo applies to all terminals of the specified model under the store, unless a different logo is configured for an individual terminal.\n\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal settings read\n* Management API—Terminal settings read and write",
        "operationId": "get-merchants-merchantId-stores-reference-terminalLogos",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The reference that identifies the store.",
            "in": "path",
            "name": "reference",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The terminal model. Possible values: E355, VX675WIFIBT, VX680, VX690, VX700, VX820, M400, MX925, P400Plus, UX300, UX410, V200cPlus, V240mPlus, V400cPlus, V400m, e280, e285, e285p, S1E, S1EL, S1F2, S1L, S1U, S7T.",
            "in": "query",
            "name": "model",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-merchants-merchantId-stores-reference-terminalLogos-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Logo"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get the terminal logo",
        "tags": [
          "Terminal settings - store level"
        ],
        "x-methodName": "getTerminalLogo",
        "x-sortIndex": 2
      },
      "patch": {
        "description": "Updates the logo that is configured for a specific payment terminal model at the store identified in the path. You can update the logo for only one terminal model at a time.\nThis logo applies to all terminals of the specified model under the store, unless a different logo is configured for an individual terminal. \n\n* To change the logo, specify the image file as a Base64-encoded string.\n* To restore the logo inherited from a higher level (merchant or company account), specify an empty logo value.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal settings read and write",
        "operationId": "patch-merchants-merchantId-stores-reference-terminalLogos",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The reference that identifies the store.",
            "in": "path",
            "name": "reference",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The terminal model. Possible values: E355, VX675WIFIBT, VX680, VX690, VX700, VX820, M400, MX925, P400Plus, UX300, UX410, V200cPlus, V240mPlus, V400cPlus, V400m, e280, e285, e285p, S1E, S1EL, S1F2, S1L, S1U, S7T",
            "in": "query",
            "name": "model",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "remove-logo": {
                  "$ref": "#/components/examples/patch-merchants-merchantId-stores-reference-terminalLogos-remove-logo"
                },
                "upload-logo": {
                  "$ref": "#/components/examples/patch-merchants-merchantId-stores-reference-terminalLogos-upload-logo"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/Logo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "remove-logo": {
                    "$ref": "#/components/examples/patch-merchants-merchantId-stores-reference-terminalLogos-remove-logo-200"
                  },
                  "upload-logo": {
                    "$ref": "#/components/examples/patch-merchants-merchantId-stores-reference-terminalLogos-upload-logo-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Logo"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update the terminal logo",
        "tags": [
          "Terminal settings - store level"
        ],
        "x-methodName": "updateTerminalLogo",
        "x-sortIndex": 4
      }
    },
    "/merchants/{merchantId}/stores/{reference}/terminalSettings": {
      "get": {
        "description": "Returns the payment terminal settings that are configured for the store identified in the path. These settings apply to all terminals under the store unless different values are configured for an individual terminal.\n\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal settings read\n* Management API—Terminal settings read and write\n\nFor [sensitive terminal settings](https://docs.adyen.com/point-of-sale/automating-terminal-management/configure-terminals-api#sensitive-terminal-settings), your API credential must have the following role:\n* Management API—Terminal settings Advanced read and write",
        "operationId": "get-merchants-merchantId-stores-reference-terminalSettings",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The reference that identifies the store.",
            "in": "path",
            "name": "reference",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-merchants-merchantId-stores-reference-terminalSettings-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TerminalSettings"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get terminal settings",
        "tags": [
          "Terminal settings - store level"
        ],
        "x-methodName": "getTerminalSettings",
        "x-sortIndex": 1
      },
      "patch": {
        "description": "Updates payment terminal settings for the store identified in the path. These settings apply to all terminals under the store, unless different values are configured for an individual terminal.\n\n* To change a parameter value, include the full object that contains the parameter, even if you don't want to change all parameters in the object.\n* To restore a parameter value inherited from a higher level, include the full object that contains the parameter, and specify an empty value for the parameter or omit the parameter.\n* Objects that are not included in the request are not updated.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal settings read and write\n\nFor [sensitive terminal settings](https://docs.adyen.com/point-of-sale/automating-terminal-management/configure-terminals-api#sensitive-terminal-settings), your API credential must have the following role:\n* Management API—Terminal settings Advanced read and write",
        "operationId": "patch-merchants-merchantId-stores-reference-terminalSettings",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The reference that identifies the store.",
            "in": "path",
            "name": "reference",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "add-eap-peap-and-psk-wifi-profiles": {
                  "$ref": "#/components/examples/patch-merchants-merchantId-stores-reference-terminalSettings-add-eap-peap-and-psk-wifi-profiles"
                },
                "add-eap-tls-wifi-profile": {
                  "$ref": "#/components/examples/patch-merchants-merchantId-stores-reference-terminalSettings-add-eap-tls-wifi-profile"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/TerminalSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "add-eap-peap-and-psk-wifi-profiles": {
                    "$ref": "#/components/examples/patch-merchants-merchantId-stores-reference-terminalSettings-add-eap-peap-and-psk-wifi-profiles-200"
                  },
                  "add-eap-tls-wifi-profile": {
                    "$ref": "#/components/examples/patch-merchants-merchantId-stores-reference-terminalSettings-add-eap-tls-wifi-profile-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TerminalSettings"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update terminal settings",
        "tags": [
          "Terminal settings - store level"
        ],
        "x-methodName": "updateTerminalSettings",
        "x-sortIndex": 3
      }
    },
    "/merchants/{merchantId}/stores/{storeId}": {
      "get": {
        "description": "Returns the details of the store identified in the path.\n\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Stores read\n* Management API—Stores read and write",
        "operationId": "get-merchants-merchantId-stores-storeId",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier of the store.",
            "in": "path",
            "name": "storeId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-merchants-merchantId-stores-storeId-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Store"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a store",
        "tags": [
          "Account - store level"
        ],
        "x-methodName": "getStore",
        "x-sortIndex": 2
      },
      "patch": {
        "description": "Updates the store identified in the path. You can only update some store parameters.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Stores read and write",
        "operationId": "patch-merchants-merchantId-stores-storeId",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier of the store.",
            "in": "path",
            "name": "storeId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "patch-stores": {
                  "$ref": "#/components/examples/patch-merchants-merchantId-stores-storeId-patch-stores"
                },
                "patch-stores-splitConfiguration": {
                  "$ref": "#/components/examples/patch-merchants-merchantId-stores-storeId-patch-stores-splitConfiguration"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateStoreRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "patch-stores": {
                    "$ref": "#/components/examples/patch-merchants-merchantId-stores-storeId-patch-stores-200"
                  },
                  "patch-stores-splitConfiguration": {
                    "$ref": "#/components/examples/patch-merchants-merchantId-stores-storeId-patch-stores-splitConfiguration-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Store"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update a store",
        "tags": [
          "Account - store level"
        ],
        "x-methodName": "updateStore",
        "x-sortIndex": 3
      }
    },
    "/merchants/{merchantId}/terminalLogos": {
      "get": {
        "description": "Returns the logo that is configured for a specific payment terminal model at the merchant account identified in the path. \nThe logo is returned as a Base64-encoded string. You need to Base64-decode the string to get the actual image file. \nThis logo applies to all terminals of the specified model under the merchant account, unless a different logo is configured at a lower level (store or individual terminal).\n\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal settings read\n* Management API—Terminal settings read and write",
        "operationId": "get-merchants-merchantId-terminalLogos",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The terminal model. Possible values: E355, VX675WIFIBT, VX680, VX690, VX700, VX820, M400, MX925, P400Plus, UX300, UX410, V200cPlus, V240mPlus, V400cPlus, V400m, e280, e285, e285p, S1E, S1EL, S1F2, S1L, S1U, S7T.",
            "in": "query",
            "name": "model",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-merchants-merchantId-terminalLogos-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Logo"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get the terminal logo",
        "tags": [
          "Terminal settings - merchant level"
        ],
        "x-methodName": "getTerminalLogo",
        "x-sortIndex": 2
      },
      "patch": {
        "description": "Updates the logo for a specific payment terminal model at the merchant account identified in the path. You can update the logo for only one terminal model at a time. \nThis logo applies to all terminals of the specified model under the merchant account, unless a different logo is configured at a lower level (store or individual terminal).\n\n* To change the logo, specify the image file as a Base64-encoded string.\n* To restore the logo inherited from the company account, specify an empty logo value.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal settings read and write",
        "operationId": "patch-merchants-merchantId-terminalLogos",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The terminal model. Allowed values: E355, VX675WIFIBT, VX680, VX690, VX700, VX820, M400, MX925, P400Plus, UX300, UX410, V200cPlus, V240mPlus, V400cPlus, V400m, e280, e285, e285p, S1E, S1EL, S1F2, S1L, S1U, S7T.",
            "in": "query",
            "name": "model",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "remove-logo": {
                  "$ref": "#/components/examples/patch-merchants-merchantId-terminalLogos-remove-logo"
                },
                "upload-logo": {
                  "$ref": "#/components/examples/patch-merchants-merchantId-terminalLogos-upload-logo"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/Logo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "remove-logo": {
                    "$ref": "#/components/examples/patch-merchants-merchantId-terminalLogos-remove-logo-200"
                  },
                  "upload-logo": {
                    "$ref": "#/components/examples/patch-merchants-merchantId-terminalLogos-upload-logo-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Logo"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update the terminal logo",
        "tags": [
          "Terminal settings - merchant level"
        ],
        "x-methodName": "updateTerminalLogo",
        "x-sortIndex": 4
      }
    },
    "/merchants/{merchantId}/terminalModels": {
      "get": {
        "description": "Returns the payment terminal models that merchant account identified in the path has access to. The response includes the terminal model ID, which can be used as a query parameter when getting a list of terminals or a list of products for ordering.\n\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal ordering read\n* Management API—Terminal ordering read and write",
        "operationId": "get-merchants-merchantId-terminalModels",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-merchants-merchantId-terminalModels-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TerminalModelsResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a list of terminal models",
        "tags": [
          "Terminal orders - merchant level"
        ],
        "x-methodName": "listTerminalModels",
        "x-sortIndex": 1
      }
    },
    "/merchants/{merchantId}/terminalOrders": {
      "get": {
        "description": "Returns a list of terminal products orders for the merchant account identified in the path.\n\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal ordering read\n* Management API—Terminal ordering read and write",
        "operationId": "get-merchants-merchantId-terminalOrders",
        "parameters": [
          {
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Your purchase order number.",
            "in": "query",
            "name": "customerOrderReference",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The order status. Possible values (not case-sensitive): Placed, Confirmed, Cancelled, Shipped, Delivered.",
            "in": "query",
            "name": "status",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of orders to skip.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The number of orders to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-merchants-merchantId-terminalOrders-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TerminalOrdersResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a list of orders",
        "tags": [
          "Terminal orders - merchant level"
        ],
        "x-methodName": "listOrders",
        "x-sortIndex": 7
      },
      "post": {
        "description": "Creates an order for payment terminal products for the merchant account identified in the path.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal ordering read and write\n>Requests to the Management API test endpoint do not create actual orders for test terminals. To order test terminals, you need to [submit a sales order](https://docs.adyen.com/point-of-sale/managing-terminals/order-terminals/#sales-order-steps) in your Customer Area.",
        "operationId": "post-merchants-merchantId-terminalOrders",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "create-order": {
                  "$ref": "#/components/examples/post-merchants-merchantId-terminalOrders-create-order"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/TerminalOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "create-order": {
                    "$ref": "#/components/examples/post-merchants-merchantId-terminalOrders-create-order-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TerminalOrder"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create an order",
        "tags": [
          "Terminal orders - merchant level"
        ],
        "x-methodName": "createOrder",
        "x-sortIndex": 6
      }
    },
    "/merchants/{merchantId}/terminalOrders/{orderId}": {
      "get": {
        "description": "Returns the details of the terminal products order identified in the path.\n\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal ordering read\n* Management API—Terminal ordering read and write",
        "operationId": "get-merchants-merchantId-terminalOrders-orderId",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier of the order.",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-merchants-merchantId-terminalOrders-orderId-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TerminalOrder"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get an order",
        "tags": [
          "Terminal orders - merchant level"
        ],
        "x-methodName": "getOrder",
        "x-sortIndex": 8
      },
      "patch": {
        "description": "Updates the terminal products order identified in the path.\nUpdating is only possible while the order has the status **Placed**.\n\nThe request body only needs to contain what you want to change. \nHowever, to update the products in the `items` array, you must provide the entire array. For example, if the array has three items:\n To remove one item, the array must include the remaining two items. Or to add one item, the array must include all four items.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal ordering read and write",
        "operationId": "patch-merchants-merchantId-terminalOrders-orderId",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier of the order.",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "update-order": {
                  "$ref": "#/components/examples/patch-merchants-merchantId-terminalOrders-orderId-update-order"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/TerminalOrderRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "update-order": {
                    "$ref": "#/components/examples/patch-merchants-merchantId-terminalOrders-orderId-update-order-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TerminalOrder"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update an order",
        "tags": [
          "Terminal orders - merchant level"
        ],
        "x-methodName": "updateOrder",
        "x-sortIndex": 9
      }
    },
    "/merchants/{merchantId}/terminalOrders/{orderId}/cancel": {
      "post": {
        "description": "Cancels the terminal products order identified in the path.\nCancelling is only possible while the order has the status **Placed**.\nTo cancel an order, make a POST call without a request body. The response returns the full order details, but with the status changed to **Cancelled**.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal ordering read and write",
        "operationId": "post-merchants-merchantId-terminalOrders-orderId-cancel",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier of the order.",
            "in": "path",
            "name": "orderId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "cancel-order": {
                    "$ref": "#/components/examples/post-merchants-merchantId-terminalOrders-orderId-cancel-cancel-order-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TerminalOrder"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Cancel an order",
        "tags": [
          "Terminal orders - merchant level"
        ],
        "x-methodName": "cancelOrder",
        "x-sortIndex": 10
      }
    },
    "/merchants/{merchantId}/terminalProducts": {
      "get": {
        "description": "Returns a country-specific list of payment terminal packages and parts that the merchant account identified in the path has access to.\n\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal ordering read\n* Management API—Terminal ordering read and write",
        "operationId": "get-merchants-merchantId-terminalProducts",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The country to return products for, in [ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2) format. For example, **US**",
            "in": "query",
            "name": "country",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The terminal model to return products for. Use the ID returned in the [GET `/terminalModels`](https://docs.adyen.com/api-explorer/#/ManagementService/latest/get/merchants/{merchantId}/terminalModels) response. For example, **Verifone.M400**",
            "in": "query",
            "name": "terminalModelId",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of products to skip.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The number of products to return.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-merchants-merchantId-terminalProducts-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TerminalProductsResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a list of terminal products",
        "tags": [
          "Terminal orders - merchant level"
        ],
        "x-methodName": "listTerminalProducts",
        "x-sortIndex": 2
      }
    },
    "/merchants/{merchantId}/terminalSettings": {
      "get": {
        "description": "Returns the payment terminal settings that are configured for the merchant account identified in the path. These settings apply to all terminals under the merchant account unless different values are configured at a lower level (store or individual terminal).\n\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal settings read\n* Management API—Terminal settings read and write",
        "operationId": "get-merchants-merchantId-terminalSettings",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-merchants-merchantId-terminalSettings-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TerminalSettings"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get terminal settings",
        "tags": [
          "Terminal settings - merchant level"
        ],
        "x-methodName": "getTerminalSettings",
        "x-sortIndex": 1
      },
      "patch": {
        "description": "Updates payment terminal settings for the merchant account identified in the path.\nThese settings apply to all terminals under the merchant account, unless different values are configured at a lower level (store or individual terminal).\n\n* To change a parameter value, include the full object that contains the parameter, even if you don't want to change all parameters in the object.\n* To restore a parameter value inherited from a higher level, include the full object that contains the parameter, and specify an empty value for the parameter or omit the parameter.\n* Objects that are not included in the request are not updated.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal settings read and write",
        "operationId": "patch-merchants-merchantId-terminalSettings",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "add-eap-peap-and-psk-wifi-profiles": {
                  "$ref": "#/components/examples/patch-merchants-merchantId-terminalSettings-add-eap-peap-and-psk-wifi-profiles"
                },
                "add-eap-tls-wifi-profile": {
                  "$ref": "#/components/examples/patch-merchants-merchantId-terminalSettings-add-eap-tls-wifi-profile"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/TerminalSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "add-eap-peap-and-psk-wifi-profiles": {
                    "$ref": "#/components/examples/patch-merchants-merchantId-terminalSettings-add-eap-peap-and-psk-wifi-profiles-200"
                  },
                  "add-eap-tls-wifi-profile": {
                    "$ref": "#/components/examples/patch-merchants-merchantId-terminalSettings-add-eap-tls-wifi-profile-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TerminalSettings"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update terminal settings",
        "tags": [
          "Terminal settings - merchant level"
        ],
        "x-methodName": "updateTerminalSettings",
        "x-sortIndex": 3
      }
    },
    "/merchants/{merchantId}/users": {
      "get": {
        "description": "Returns a list of users associated with the `merchantId` specified in the path.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Users read and write\n",
        "operationId": "get-merchants-merchantId-users",
        "parameters": [
          {
            "description": "Unique identifier of the merchant.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of the page to fetch.",
            "in": "query",
            "name": "pageNumber",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The number of items to have on a page. Maximum value is **100**. The default is **10** items on a page.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The partial or complete username to select all users that match.",
            "in": "query",
            "name": "username",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ListMerchantUsersResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a list of users",
        "tags": [
          "Users - merchant level"
        ],
        "x-methodName": "listUsers",
        "x-sortIndex": 0
      },
      "post": {
        "description": "Creates a user for the `merchantId` specified in the path.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Users read and write\n",
        "operationId": "post-merchants-merchantId-users",
        "parameters": [
          {
            "description": "Unique identifier of the merchant.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "create-user": {
                  "$ref": "#/components/examples/post-merchants-merchantId-users-create-user"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/CreateMerchantUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "create-user": {
                    "$ref": "#/components/examples/post-merchants-merchantId-users-create-user-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/CreateUserResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create a new user",
        "tags": [
          "Users - merchant level"
        ],
        "x-methodName": "createNewUser",
        "x-sortIndex": 0
      }
    },
    "/merchants/{merchantId}/users/{userId}": {
      "get": {
        "description": "Returns user details for the `userId` and the `merchantId` specified in the path.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Users read and write\n",
        "operationId": "get-merchants-merchantId-users-userId",
        "parameters": [
          {
            "description": "Unique identifier of the merchant.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the user.",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get user details",
        "tags": [
          "Users - merchant level"
        ],
        "x-methodName": "getUserDetails",
        "x-sortIndex": 0
      },
      "patch": {
        "description": "Updates user details for the `userId` and the `merchantId` specified in the path.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Users read and write\n",
        "operationId": "patch-merchants-merchantId-users-userId",
        "parameters": [
          {
            "description": "Unique identifier of the merchant.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the user.",
            "in": "path",
            "name": "userId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMerchantUserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update a user",
        "tags": [
          "Users - merchant level"
        ],
        "x-methodName": "updateUser",
        "x-sortIndex": 0
      }
    },
    "/merchants/{merchantId}/webhooks": {
      "get": {
        "description": "Lists all webhook configurations for the merchant account.\n\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Webhooks read\n* Management API—Webhooks read and write",
        "operationId": "get-merchants-merchantId-webhooks",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of the page to fetch.",
            "in": "query",
            "name": "pageNumber",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The number of items to have on a page, maximum 100. The default is 10 items on a page.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "get-merchant-webhooks": {
                    "$ref": "#/components/examples/get-merchants-merchantId-webhooks-get-merchant-webhooks-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ListWebhooksResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "List all webhooks",
        "tags": [
          "Webhooks - merchant level"
        ],
        "x-methodName": "listAllWebhooks",
        "x-sortIndex": 2
      },
      "post": {
        "description": "Subscribe to receive webhook notifications about events related to your merchant account. You can add basic authentication to make sure the data is secure.\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Webhooks read and write",
        "operationId": "post-merchants-merchantId-webhooks",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "post-merchant-webhook": {
                  "$ref": "#/components/examples/post-merchants-merchantId-webhooks-post-merchant-webhook"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/CreateMerchantWebhookRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "post-merchant-webhook": {
                    "$ref": "#/components/examples/post-merchants-merchantId-webhooks-post-merchant-webhook-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Set up a webhook",
        "tags": [
          "Webhooks - merchant level"
        ],
        "x-methodName": "setUpWebhook",
        "x-sortIndex": 1
      }
    },
    "/merchants/{merchantId}/webhooks/{webhookId}": {
      "delete": {
        "description": "Remove the configuration for the webhook identified in the path.\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Webhooks read and write",
        "operationId": "delete-merchants-merchantId-webhooks-webhookId",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the webhook configuration.",
            "in": "path",
            "name": "webhookId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content - look at the actual response code for the status of the request. "
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Remove a webhook",
        "tags": [
          "Webhooks - merchant level"
        ],
        "x-methodName": "removeWebhook",
        "x-sortIndex": 5
      },
      "get": {
        "description": "Returns the configuration for the webhook identified in the path.\n\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Webhooks read\n* Management API—Webhooks read and write",
        "operationId": "get-merchants-merchantId-webhooks-webhookId",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the webhook configuration.",
            "in": "path",
            "name": "webhookId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "get-merchant-webhook": {
                    "$ref": "#/components/examples/get-merchants-merchantId-webhooks-webhookId-get-merchant-webhook-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a webhook",
        "tags": [
          "Webhooks - merchant level"
        ],
        "x-methodName": "getWebhook",
        "x-sortIndex": 3
      },
      "patch": {
        "description": "Make changes to the configuration of the webhook identified in the path. The request contains the new values you want to have in the webhook configuration. The response contains the full configuration for the webhook, which includes the new values from the request.\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Webhooks read and write",
        "operationId": "patch-merchants-merchantId-webhooks-webhookId",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the webhook configuration.",
            "in": "path",
            "name": "webhookId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "patch-merchant-webhook": {
                  "$ref": "#/components/examples/patch-merchants-merchantId-webhooks-webhookId-patch-merchant-webhook"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateMerchantWebhookRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "patch-merchant-webhook": {
                    "$ref": "#/components/examples/patch-merchants-merchantId-webhooks-webhookId-patch-merchant-webhook-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update a webhook",
        "tags": [
          "Webhooks - merchant level"
        ],
        "x-methodName": "updateWebhook",
        "x-sortIndex": 4
      }
    },
    "/merchants/{merchantId}/webhooks/{webhookId}/generateHmac": {
      "post": {
        "description": "Returns an [HMAC key](https://en.wikipedia.org/wiki/HMAC) for the webhook identified in the path. This key allows you to check the integrity and the origin of the notifications you receive.By creating an HMAC key, you start receiving [HMAC-signed notifications](https://docs.adyen.com/development-resources/webhooks/verify-hmac-signatures#enable-hmac-signatures) from Adyen. Find out more about how to [verify HMAC signatures](https://docs.adyen.com/development-resources/webhooks/verify-hmac-signatures).\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Webhooks read and write",
        "operationId": "post-merchants-merchantId-webhooks-webhookId-generateHmac",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "path",
            "name": "webhookId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "post-merchant-webhook-generateHmac": {
                    "$ref": "#/components/examples/post-merchants-merchantId-webhooks-webhookId-generateHmac-post-merchant-webhook-generateHmac-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/GenerateHmacKeyResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Generate an HMAC key",
        "tags": [
          "Webhooks - merchant level"
        ],
        "x-methodName": "generateHmacKey",
        "x-sortIndex": 6
      }
    },
    "/merchants/{merchantId}/webhooks/{webhookId}/test": {
      "post": {
        "description": "Sends sample notifications to test if the webhook is set up correctly.\n\nWe send four test notifications for each event code you choose. They cover success and failure scenarios for the hard-coded currencies EUR and GBP, regardless of the currencies configured in the merchant accounts. For custom notifications, we only send the specified custom notification.\n\nThe response describes the result of the test. The `status` field tells you if the test was successful or not. You can use the other fields to troubleshoot unsuccessful tests.\n\nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Webhooks read and write",
        "operationId": "post-merchants-merchantId-webhooks-webhookId-test",
        "parameters": [
          {
            "description": "The unique identifier of the merchant account.",
            "in": "path",
            "name": "merchantId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Unique identifier of the webhook configuration.",
            "in": "path",
            "name": "webhookId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "post-merchant-webhook-test": {
                  "$ref": "#/components/examples/post-merchants-merchantId-webhooks-webhookId-test-post-merchant-webhook-test"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/TestWebhookRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "post-merchant-webhook-test": {
                    "$ref": "#/components/examples/post-merchants-merchantId-webhooks-webhookId-test-post-merchant-webhook-test-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TestWebhookResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "204": {
            "description": "No Content - the request has been successfully processed, but there is no additional content."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Test a webhook",
        "tags": [
          "Webhooks - merchant level"
        ],
        "x-methodName": "testWebhook",
        "x-sortIndex": 7
      }
    },
    "/stores": {
      "get": {
        "description": "Returns a list of stores. The list is grouped into pages as defined by the query parameters.\n\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Stores read\n* Management API—Stores read and write",
        "operationId": "get-stores",
        "parameters": [
          {
            "description": "The number of the page to fetch.",
            "in": "query",
            "name": "pageNumber",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The number of items to have on a page, maximum 100. The default is 10 items on a page.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The reference of the store.",
            "in": "query",
            "name": "reference",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The unique identifier of the merchant account.",
            "in": "query",
            "name": "merchantId",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-stores-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ListStoresResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a list of stores",
        "tags": [
          "Account - store level"
        ],
        "x-methodName": "listStores",
        "x-sortIndex": 4
      },
      "post": {
        "description": "Creates a store for the merchant account specified in the request.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Stores read and write",
        "operationId": "post-stores",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "post-stores": {
                  "$ref": "#/components/examples/post-stores-post-stores"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/StoreCreationWithMerchantCodeRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "post-stores": {
                    "$ref": "#/components/examples/post-stores-post-stores-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Store"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create a store",
        "tags": [
          "Account - store level"
        ],
        "x-methodName": "createStore",
        "x-sortIndex": 5
      }
    },
    "/stores/{storeId}": {
      "get": {
        "description": "Returns the details of the store identified in the path.\n\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Stores read\n* Management API—Stores read and write",
        "operationId": "get-stores-storeId",
        "parameters": [
          {
            "description": "The unique identifier of the store.",
            "in": "path",
            "name": "storeId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-stores-storeId-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Store"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a store",
        "tags": [
          "Account - store level"
        ],
        "x-methodName": "getStoreById",
        "x-sortIndex": 6
      },
      "patch": {
        "description": "Updates the store identified in the path.\nYou can only update some store parameters.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Stores read and write",
        "operationId": "patch-stores-storeId",
        "parameters": [
          {
            "description": "The unique identifier of the store.",
            "in": "path",
            "name": "storeId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "patch-stores": {
                  "$ref": "#/components/examples/patch-stores-storeId-patch-stores"
                },
                "patch-stores-splitConfiguration": {
                  "$ref": "#/components/examples/patch-stores-storeId-patch-stores-splitConfiguration"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/UpdateStoreRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "patch-stores": {
                    "$ref": "#/components/examples/patch-stores-storeId-patch-stores-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Store"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update a store",
        "tags": [
          "Account - store level"
        ],
        "x-methodName": "updateStoreById",
        "x-sortIndex": 7
      }
    },
    "/stores/{storeId}/terminalLogos": {
      "get": {
        "description": "Returns the logo that is configured for a specific payment terminal model at the store identified in the path. \nThe logo is returned as a Base64-encoded string. You need to Base64-decode the string to get the actual image file. \nThis logo applies to all terminals of that model under the store unless a different logo is configured for an individual terminal.\n\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal settings read\n* Management API—Terminal settings read and write",
        "operationId": "get-stores-storeId-terminalLogos",
        "parameters": [
          {
            "description": "The unique identifier of the store.",
            "in": "path",
            "name": "storeId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The terminal model. Possible values: E355, VX675WIFIBT, VX680, VX690, VX700, VX820, M400, MX925, P400Plus, UX300, UX410, V200cPlus, V240mPlus, V400cPlus, V400m, e280, e285, e285p, S1E, S1EL, S1F2, S1L, S1U, S7T.",
            "in": "query",
            "name": "model",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-stores-storeId-terminalLogos-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Logo"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get the terminal logo",
        "tags": [
          "Terminal settings - store level"
        ],
        "x-methodName": "getTerminalLogoByStoreId",
        "x-sortIndex": 2
      },
      "patch": {
        "description": "Updates the logo that is configured for a specific payment terminal model at the store identified in the path. You can update the logo for only one terminal model at a time.\nThis logo applies to all terminals of the specified model under the store, unless a different logo is configured for an individual terminal. \n\n* To change the logo, specify the image file as a Base64-encoded string.\n* To restore the logo inherited from a higher level (merchant or company account), specify an empty logo value.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal settings read and write",
        "operationId": "patch-stores-storeId-terminalLogos",
        "parameters": [
          {
            "description": "The unique identifier of the store.",
            "in": "path",
            "name": "storeId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The terminal model. Possible values: E355, VX675WIFIBT, VX680, VX690, VX700, VX820, M400, MX925, P400Plus, UX300, UX410, V200cPlus, V240mPlus, V400cPlus, V400m, e280, e285, e285p, S1E, S1EL, S1F2, S1L, S1U, S7T.",
            "in": "query",
            "name": "model",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "remove-logo": {
                  "$ref": "#/components/examples/patch-stores-storeId-terminalLogos-remove-logo"
                },
                "upload-logo": {
                  "$ref": "#/components/examples/patch-stores-storeId-terminalLogos-upload-logo"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/Logo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "remove-logo": {
                    "$ref": "#/components/examples/patch-stores-storeId-terminalLogos-remove-logo-200"
                  },
                  "upload-logo": {
                    "$ref": "#/components/examples/patch-stores-storeId-terminalLogos-upload-logo-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Logo"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update the terminal logo",
        "tags": [
          "Terminal settings - store level"
        ],
        "x-methodName": "updateTerminalLogoByStoreId",
        "x-sortIndex": 4
      }
    },
    "/stores/{storeId}/terminalSettings": {
      "get": {
        "description": "Returns the payment terminal settings that are configured for the store identified in the path. These settings apply to all terminals under the store unless different values are configured for an individual terminal.\n\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal settings read\n* Management API—Terminal settings read and write\n\nFor [sensitive terminal settings](https://docs.adyen.com/point-of-sale/automating-terminal-management/configure-terminals-api#sensitive-terminal-settings), your API credential must have the following role:\n* Management API—Terminal settings Advanced read and write",
        "operationId": "get-stores-storeId-terminalSettings",
        "parameters": [
          {
            "description": "The unique identifier of the store.",
            "in": "path",
            "name": "storeId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-stores-storeId-terminalSettings-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TerminalSettings"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get terminal settings",
        "tags": [
          "Terminal settings - store level"
        ],
        "x-methodName": "getTerminalSettingsByStoreId",
        "x-sortIndex": 1
      },
      "patch": {
        "description": "Updates payment terminal settings for the store identified in the path. These settings apply to all terminals under the store, unless different values are configured for an individual terminal.\n\n* To change a parameter value, include the full object that contains the parameter, even if you don't want to change all parameters in the object.\n* To restore a parameter value inherited from a higher level, include the full object that contains the parameter, and specify an empty value for the parameter or omit the parameter.\n* Objects that are not included in the request are not updated.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal settings read and write\n\nFor [sensitive terminal settings](https://docs.adyen.com/point-of-sale/automating-terminal-management/configure-terminals-api#sensitive-terminal-settings), your API credential must have the following role:\n* Management API—Terminal settings Advanced read and write",
        "operationId": "patch-stores-storeId-terminalSettings",
        "parameters": [
          {
            "description": "The unique identifier of the store.",
            "in": "path",
            "name": "storeId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "add-eap-peap-and-psk-wifi-profiles": {
                  "$ref": "#/components/examples/patch-stores-storeId-terminalSettings-add-eap-peap-and-psk-wifi-profiles"
                },
                "add-eap-tls-wifi-profile": {
                  "$ref": "#/components/examples/patch-stores-storeId-terminalSettings-add-eap-tls-wifi-profile"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/TerminalSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "add-eap-peap-and-psk-wifi-profiles": {
                    "$ref": "#/components/examples/patch-stores-storeId-terminalSettings-add-eap-peap-and-psk-wifi-profiles-200"
                  },
                  "add-eap-tls-wifi-profile": {
                    "$ref": "#/components/examples/patch-stores-storeId-terminalSettings-add-eap-tls-wifi-profile-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TerminalSettings"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update terminal settings",
        "tags": [
          "Terminal settings - store level"
        ],
        "x-methodName": "updateTerminalSettingsByStoreId",
        "x-sortIndex": 3
      }
    },
    "/terminals": {
      "get": {
        "description": "Returns the payment terminals that the API credential has access to and that match the query parameters. \nTo make this request, your API credential must have the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API — Terminal actions read",
        "operationId": "get-terminals",
        "parameters": [
          {
            "description": "Returns terminals with an ID that contains the specified string. If present, other query parameters are ignored.",
            "in": "query",
            "name": "searchQuery",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Returns one or more terminals associated with the one-time passwords specified in the request. If this query parameter is used, other query parameters are ignored.",
            "in": "query",
            "name": "otpQuery",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Returns terminals located in the countries specified by their [two-letter country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).",
            "in": "query",
            "name": "countries",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Returns terminals that belong to the merchant accounts specified by their unique merchant account ID.",
            "in": "query",
            "name": "merchantIds",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Returns terminals that are assigned to the [stores](https://docs.adyen.com/api-explorer/#/ManagementService/latest/get/stores) specified by their unique store ID.",
            "in": "query",
            "name": "storeIds",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "Returns terminals of the [models](https://docs.adyen.com/api-explorer/#/ManagementService/latest/get/companies/{companyId}/terminalModels) specified in the format *brand.model*.",
            "in": "query",
            "name": "brandModels",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "The number of the page to fetch.",
            "in": "query",
            "name": "pageNumber",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          },
          {
            "description": "The number of items to have on a page, maximum 100. The default is 20 items on a page.",
            "in": "query",
            "name": "pageSize",
            "required": false,
            "schema": {
              "format": "int32",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-terminals-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ListTerminalsResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get a list of terminals",
        "tags": [
          "Terminals - terminal level"
        ],
        "x-methodName": "listTerminals",
        "x-sortIndex": 1
      }
    },
    "/terminals/scheduleActions": {
      "post": {
        "description": "Schedules a [terminal action](https://docs.adyen.com/point-of-sale/automating-terminal-management/terminal-actions-api) by specifying the action and the terminals that the action must be applied to. \n\nThe following restrictions apply:\n* You can schedule only one action at a time. For example, to install a new app version and remove an old app version, you have to make two API requests. \n* The maximum number of terminals in a request is **100**. For example, to apply an action to 250 terminals, you have to divide the terminals over three API requests. \n* If there is an error with one or more terminal IDs in the request, the action is scheduled for none of the terminals. You need to fix the error and try again. \n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal actions read and write",
        "operationId": "post-terminals-scheduleActions",
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "install-app": {
                  "$ref": "#/components/examples/post-terminals-scheduleActions-install-app"
                },
                "uninstall-cert": {
                  "$ref": "#/components/examples/post-terminals-scheduleActions-uninstall-cert"
                },
                "verification-error": {
                  "$ref": "#/components/examples/post-terminals-scheduleActions-verification-error"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/ScheduleTerminalActionsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "install-app": {
                    "$ref": "#/components/examples/post-terminals-scheduleActions-install-app-200"
                  },
                  "uninstall-cert": {
                    "$ref": "#/components/examples/post-terminals-scheduleActions-uninstall-cert-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ScheduleTerminalActionsResponse"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "examples": {
                  "verification-error": {
                    "$ref": "#/components/examples/post-terminals-scheduleActions-verification-error-422"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create a terminal action",
        "tags": [
          "Terminal actions - terminal level"
        ],
        "x-methodName": "createTerminalAction",
        "x-sortIndex": 1
      }
    },
    "/terminals/{terminalId}/terminalLogos": {
      "get": {
        "description": "Returns the logo that is configured for the payment terminal identified in the path.\nThe logo is returned as a Base64-encoded string. You need to Base64-decode the string to get the actual image file.\n\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal settings read\n* Management API—Terminal settings read and write",
        "operationId": "get-terminals-terminalId-terminalLogos",
        "parameters": [
          {
            "description": "The unique identifier of the payment terminal.",
            "in": "path",
            "name": "terminalId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-terminals-terminalId-terminalLogos-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Logo"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get the terminal logo",
        "tags": [
          "Terminal settings - terminal level"
        ],
        "x-methodName": "getTerminalLogo",
        "x-sortIndex": 4
      },
      "patch": {
        "description": "Updates the logo for the payment terminal identified in the path.\n\n* To change the logo, specify the image file as a Base64-encoded string.\n* To restore the logo inherited from a higher level (store, merchant account, or company account), specify an empty logo value.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal settings read and write",
        "operationId": "patch-terminals-terminalId-terminalLogos",
        "parameters": [
          {
            "description": "The unique identifier of the payment terminal.",
            "in": "path",
            "name": "terminalId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "remove-logo": {
                  "$ref": "#/components/examples/patch-terminals-terminalId-terminalLogos-remove-logo"
                },
                "upload-logo": {
                  "$ref": "#/components/examples/patch-terminals-terminalId-terminalLogos-upload-logo"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/Logo"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "remove-logo": {
                    "$ref": "#/components/examples/patch-terminals-terminalId-terminalLogos-remove-logo-200"
                  },
                  "upload-logo": {
                    "$ref": "#/components/examples/patch-terminals-terminalId-terminalLogos-upload-logo-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Logo"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update the logo",
        "tags": [
          "Terminal settings - terminal level"
        ],
        "x-methodName": "updateLogo",
        "x-sortIndex": 6
      }
    },
    "/terminals/{terminalId}/terminalSettings": {
      "get": {
        "description": "Returns the settings that are configured for the payment terminal identified in the path.\n\nTo make this request, your API credential must have one of the following [roles](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal settings read\n* Management API—Terminal settings read and write\n\nFor [sensitive terminal settings](https://docs.adyen.com/point-of-sale/automating-terminal-management/configure-terminals-api#sensitive-terminal-settings), your API credential must have the following role:\n* Management API—Terminal settings Advanced read and write",
        "operationId": "get-terminals-terminalId-terminalSettings",
        "parameters": [
          {
            "description": "The unique identifier of the payment terminal.",
            "in": "path",
            "name": "terminalId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "success": {
                    "$ref": "#/components/examples/get-terminals-terminalId-terminalSettings-success-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TerminalSettings"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get terminal settings",
        "tags": [
          "Terminal settings - terminal level"
        ],
        "x-methodName": "getTerminalSettings",
        "x-sortIndex": 3
      },
      "patch": {
        "description": "Updates the settings that are configured for the payment terminal identified in the path.\n\n* To change a parameter value, include the full object that contains the parameter, even if you don't want to change all parameters in the object.\n* To restore a parameter value inherited from a higher level, include the full object that contains the parameter, and specify an empty value for the parameter or omit the parameter.\n* Objects that are not included in the request are not updated.\n\nTo make this request, your API credential must have the following [role](https://docs.adyen.com/development-resources/api-credentials#api-permissions):\n* Management API—Terminal settings read and write\n\nFor [sensitive terminal settings](https://docs.adyen.com/point-of-sale/automating-terminal-management/configure-terminals-api#sensitive-terminal-settings), your API credential must have the following role:\n* Management API—Terminal settings Advanced read and write",
        "operationId": "patch-terminals-terminalId-terminalSettings",
        "parameters": [
          {
            "description": "The unique identifier of the payment terminal.",
            "in": "path",
            "name": "terminalId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "examples": {
                "add-eap-peap-and-psk-wifi-profiles": {
                  "$ref": "#/components/examples/patch-terminals-terminalId-terminalSettings-add-eap-peap-and-psk-wifi-profiles"
                },
                "add-eap-tls-wifi-profile": {
                  "$ref": "#/components/examples/patch-terminals-terminalId-terminalSettings-add-eap-tls-wifi-profile"
                }
              },
              "schema": {
                "$ref": "#/components/schemas/TerminalSettings"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "examples": {
                  "add-eap-peap-and-psk-wifi-profiles": {
                    "$ref": "#/components/examples/patch-terminals-terminalId-terminalSettings-add-eap-peap-and-psk-wifi-profiles-200"
                  },
                  "add-eap-tls-wifi-profile": {
                    "$ref": "#/components/examples/patch-terminals-terminalId-terminalSettings-add-eap-tls-wifi-profile-200"
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/TerminalSettings"
                }
              }
            },
            "description": "OK - the request has succeeded."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Bad Request - a problem reading or understanding the request."
          },
          "401": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unauthorized - authentication required."
          },
          "403": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Forbidden - insufficient permissions to process the request."
          },
          "422": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Unprocessable Entity - a request validation error."
          },
          "500": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RestServiceError"
                }
              }
            },
            "description": "Internal Server Error - the server could not process the request."
          }
        },
        "security": [
          {
            "BasicAuth": []
          },
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update terminal settings",
        "tags": [
          "Terminal settings - terminal level"
        ],
        "x-methodName": "updateTerminalSettings",
        "x-sortIndex": 5
      }
    }
  }
}
